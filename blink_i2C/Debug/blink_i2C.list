
blink_i2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002314  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800249c  0800249c  0001249c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080024b4  080024b4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080024b4  080024b4  000124b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080024bc  080024bc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080024bc  080024bc  000124bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080024c0  080024c0  000124c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080024c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000074  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000080  20000080  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      000000a7  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00008cfa  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000016e3  00000000  00000000  00028ddd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000760  00000000  00000000  0002a4c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000708  00000000  00000000  0002ac20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001ef8f  00000000  00000000  0002b328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000074e8  00000000  00000000  0004a2b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c0152  00000000  00000000  0005179f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001b58  00000000  00000000  001118f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000128d  00000000  00000000  0011344c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <deregister_tm_clones>:
 8000188:	4803      	ldr	r0, [pc, #12]	; (8000198 <deregister_tm_clones+0x10>)
 800018a:	4b04      	ldr	r3, [pc, #16]	; (800019c <deregister_tm_clones+0x14>)
 800018c:	4283      	cmp	r3, r0
 800018e:	d002      	beq.n	8000196 <deregister_tm_clones+0xe>
 8000190:	4b03      	ldr	r3, [pc, #12]	; (80001a0 <deregister_tm_clones+0x18>)
 8000192:	b103      	cbz	r3, 8000196 <deregister_tm_clones+0xe>
 8000194:	4718      	bx	r3
 8000196:	4770      	bx	lr
 8000198:	2000000c 	.word	0x2000000c
 800019c:	2000000c 	.word	0x2000000c
 80001a0:	00000000 	.word	0x00000000

080001a4 <register_tm_clones>:
 80001a4:	4805      	ldr	r0, [pc, #20]	; (80001bc <register_tm_clones+0x18>)
 80001a6:	4906      	ldr	r1, [pc, #24]	; (80001c0 <register_tm_clones+0x1c>)
 80001a8:	1a0b      	subs	r3, r1, r0
 80001aa:	0fd9      	lsrs	r1, r3, #31
 80001ac:	eb01 01a3 	add.w	r1, r1, r3, asr #2
 80001b0:	1049      	asrs	r1, r1, #1
 80001b2:	d002      	beq.n	80001ba <register_tm_clones+0x16>
 80001b4:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <register_tm_clones+0x20>)
 80001b6:	b103      	cbz	r3, 80001ba <register_tm_clones+0x16>
 80001b8:	4718      	bx	r3
 80001ba:	4770      	bx	lr
 80001bc:	2000000c 	.word	0x2000000c
 80001c0:	2000000c 	.word	0x2000000c
 80001c4:	00000000 	.word	0x00000000

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c06      	ldr	r4, [pc, #24]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b943      	cbnz	r3, 80001e2 <__do_global_dtors_aux+0x1a>
 80001d0:	f7ff ffda 	bl	8000188 <deregister_tm_clones>
 80001d4:	4b04      	ldr	r3, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	b113      	cbz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d8:	4804      	ldr	r0, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x24>)
 80001da:	f3af 8000 	nop.w
 80001de:	2301      	movs	r3, #1
 80001e0:	7023      	strb	r3, [r4, #0]
 80001e2:	bd10      	pop	{r4, pc}
 80001e4:	2000000c 	.word	0x2000000c
 80001e8:	00000000 	.word	0x00000000
 80001ec:	08002484 	.word	0x08002484

080001f0 <frame_dummy>:
 80001f0:	b508      	push	{r3, lr}
 80001f2:	4b04      	ldr	r3, [pc, #16]	; (8000204 <frame_dummy+0x14>)
 80001f4:	b11b      	cbz	r3, 80001fe <frame_dummy+0xe>
 80001f6:	4904      	ldr	r1, [pc, #16]	; (8000208 <frame_dummy+0x18>)
 80001f8:	4804      	ldr	r0, [pc, #16]	; (800020c <frame_dummy+0x1c>)
 80001fa:	f3af 8000 	nop.w
 80001fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000202:	e7cf      	b.n	80001a4 <register_tm_clones>
 8000204:	00000000 	.word	0x00000000
 8000208:	20000010 	.word	0x20000010
 800020c:	08002484 	.word	0x08002484

08000210 <__libc_init_array>:
 8000210:	b570      	push	{r4, r5, r6, lr}
 8000212:	4e0d      	ldr	r6, [pc, #52]	; (8000248 <__libc_init_array+0x38>)
 8000214:	4d0d      	ldr	r5, [pc, #52]	; (800024c <__libc_init_array+0x3c>)
 8000216:	1b76      	subs	r6, r6, r5
 8000218:	10b6      	asrs	r6, r6, #2
 800021a:	d006      	beq.n	800022a <__libc_init_array+0x1a>
 800021c:	2400      	movs	r4, #0
 800021e:	3401      	adds	r4, #1
 8000220:	f855 3b04 	ldr.w	r3, [r5], #4
 8000224:	4798      	blx	r3
 8000226:	42a6      	cmp	r6, r4
 8000228:	d1f9      	bne.n	800021e <__libc_init_array+0xe>
 800022a:	4e09      	ldr	r6, [pc, #36]	; (8000250 <__libc_init_array+0x40>)
 800022c:	4d09      	ldr	r5, [pc, #36]	; (8000254 <__libc_init_array+0x44>)
 800022e:	1b76      	subs	r6, r6, r5
 8000230:	f002 f928 	bl	8002484 <_init>
 8000234:	10b6      	asrs	r6, r6, #2
 8000236:	d006      	beq.n	8000246 <__libc_init_array+0x36>
 8000238:	2400      	movs	r4, #0
 800023a:	3401      	adds	r4, #1
 800023c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000240:	4798      	blx	r3
 8000242:	42a6      	cmp	r6, r4
 8000244:	d1f9      	bne.n	800023a <__libc_init_array+0x2a>
 8000246:	bd70      	pop	{r4, r5, r6, pc}
 8000248:	080024bc 	.word	0x080024bc
 800024c:	080024bc 	.word	0x080024bc
 8000250:	080024c0 	.word	0x080024c0
 8000254:	080024bc 	.word	0x080024bc

08000258 <memset>:
 8000258:	b4f0      	push	{r4, r5, r6, r7}
 800025a:	0786      	lsls	r6, r0, #30
 800025c:	d046      	beq.n	80002ec <memset+0x94>
 800025e:	1e54      	subs	r4, r2, #1
 8000260:	2a00      	cmp	r2, #0
 8000262:	d03c      	beq.n	80002de <memset+0x86>
 8000264:	b2ca      	uxtb	r2, r1
 8000266:	4603      	mov	r3, r0
 8000268:	e002      	b.n	8000270 <memset+0x18>
 800026a:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
 800026e:	d336      	bcc.n	80002de <memset+0x86>
 8000270:	f803 2b01 	strb.w	r2, [r3], #1
 8000274:	079d      	lsls	r5, r3, #30
 8000276:	d1f8      	bne.n	800026a <memset+0x12>
 8000278:	2c03      	cmp	r4, #3
 800027a:	d929      	bls.n	80002d0 <memset+0x78>
 800027c:	b2cd      	uxtb	r5, r1
 800027e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8000282:	2c0f      	cmp	r4, #15
 8000284:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8000288:	d933      	bls.n	80002f2 <memset+0x9a>
 800028a:	f1a4 0610 	sub.w	r6, r4, #16
 800028e:	0936      	lsrs	r6, r6, #4
 8000290:	f103 0720 	add.w	r7, r3, #32
 8000294:	eb07 1706 	add.w	r7, r7, r6, lsl #4
 8000298:	f103 0210 	add.w	r2, r3, #16
 800029c:	e942 5504 	strd	r5, r5, [r2, #-16]
 80002a0:	e942 5502 	strd	r5, r5, [r2, #-8]
 80002a4:	3210      	adds	r2, #16
 80002a6:	42ba      	cmp	r2, r7
 80002a8:	d1f8      	bne.n	800029c <memset+0x44>
 80002aa:	1c72      	adds	r2, r6, #1
 80002ac:	f014 0f0c 	tst.w	r4, #12
 80002b0:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80002b4:	f004 060f 	and.w	r6, r4, #15
 80002b8:	d013      	beq.n	80002e2 <memset+0x8a>
 80002ba:	1f33      	subs	r3, r6, #4
 80002bc:	f023 0303 	bic.w	r3, r3, #3
 80002c0:	3304      	adds	r3, #4
 80002c2:	4413      	add	r3, r2
 80002c4:	f842 5b04 	str.w	r5, [r2], #4
 80002c8:	4293      	cmp	r3, r2
 80002ca:	d1fb      	bne.n	80002c4 <memset+0x6c>
 80002cc:	f006 0403 	and.w	r4, r6, #3
 80002d0:	b12c      	cbz	r4, 80002de <memset+0x86>
 80002d2:	b2c9      	uxtb	r1, r1
 80002d4:	441c      	add	r4, r3
 80002d6:	f803 1b01 	strb.w	r1, [r3], #1
 80002da:	429c      	cmp	r4, r3
 80002dc:	d1fb      	bne.n	80002d6 <memset+0x7e>
 80002de:	bcf0      	pop	{r4, r5, r6, r7}
 80002e0:	4770      	bx	lr
 80002e2:	4634      	mov	r4, r6
 80002e4:	4613      	mov	r3, r2
 80002e6:	2c00      	cmp	r4, #0
 80002e8:	d1f3      	bne.n	80002d2 <memset+0x7a>
 80002ea:	e7f8      	b.n	80002de <memset+0x86>
 80002ec:	4614      	mov	r4, r2
 80002ee:	4603      	mov	r3, r0
 80002f0:	e7c2      	b.n	8000278 <memset+0x20>
 80002f2:	461a      	mov	r2, r3
 80002f4:	4626      	mov	r6, r4
 80002f6:	e7e0      	b.n	80002ba <memset+0x62>

080002f8 <__aeabi_uldivmod>:
 80002f8:	b953      	cbnz	r3, 8000310 <__aeabi_uldivmod+0x18>
 80002fa:	b94a      	cbnz	r2, 8000310 <__aeabi_uldivmod+0x18>
 80002fc:	2900      	cmp	r1, #0
 80002fe:	bf08      	it	eq
 8000300:	2800      	cmpeq	r0, #0
 8000302:	bf1c      	itt	ne
 8000304:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000308:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800030c:	f000 b96e 	b.w	80005ec <__aeabi_idiv0>
 8000310:	f1ad 0c08 	sub.w	ip, sp, #8
 8000314:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000318:	f000 f806 	bl	8000328 <__udivmoddi4>
 800031c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000320:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000324:	b004      	add	sp, #16
 8000326:	4770      	bx	lr

08000328 <__udivmoddi4>:
 8000328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800032c:	9d08      	ldr	r5, [sp, #32]
 800032e:	4604      	mov	r4, r0
 8000330:	468c      	mov	ip, r1
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8083 	bne.w	800043e <__udivmoddi4+0x116>
 8000338:	428a      	cmp	r2, r1
 800033a:	4617      	mov	r7, r2
 800033c:	d947      	bls.n	80003ce <__udivmoddi4+0xa6>
 800033e:	fab2 f282 	clz	r2, r2
 8000342:	b142      	cbz	r2, 8000356 <__udivmoddi4+0x2e>
 8000344:	f1c2 0020 	rsb	r0, r2, #32
 8000348:	fa24 f000 	lsr.w	r0, r4, r0
 800034c:	4091      	lsls	r1, r2
 800034e:	4097      	lsls	r7, r2
 8000350:	ea40 0c01 	orr.w	ip, r0, r1
 8000354:	4094      	lsls	r4, r2
 8000356:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800035a:	0c23      	lsrs	r3, r4, #16
 800035c:	fbbc f6f8 	udiv	r6, ip, r8
 8000360:	fa1f fe87 	uxth.w	lr, r7
 8000364:	fb08 c116 	mls	r1, r8, r6, ip
 8000368:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800036c:	fb06 f10e 	mul.w	r1, r6, lr
 8000370:	4299      	cmp	r1, r3
 8000372:	d909      	bls.n	8000388 <__udivmoddi4+0x60>
 8000374:	18fb      	adds	r3, r7, r3
 8000376:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800037a:	f080 8119 	bcs.w	80005b0 <__udivmoddi4+0x288>
 800037e:	4299      	cmp	r1, r3
 8000380:	f240 8116 	bls.w	80005b0 <__udivmoddi4+0x288>
 8000384:	3e02      	subs	r6, #2
 8000386:	443b      	add	r3, r7
 8000388:	1a5b      	subs	r3, r3, r1
 800038a:	b2a4      	uxth	r4, r4
 800038c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000390:	fb08 3310 	mls	r3, r8, r0, r3
 8000394:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000398:	fb00 fe0e 	mul.w	lr, r0, lr
 800039c:	45a6      	cmp	lr, r4
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x8c>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003a6:	f080 8105 	bcs.w	80005b4 <__udivmoddi4+0x28c>
 80003aa:	45a6      	cmp	lr, r4
 80003ac:	f240 8102 	bls.w	80005b4 <__udivmoddi4+0x28c>
 80003b0:	3802      	subs	r0, #2
 80003b2:	443c      	add	r4, r7
 80003b4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b8:	eba4 040e 	sub.w	r4, r4, lr
 80003bc:	2600      	movs	r6, #0
 80003be:	b11d      	cbz	r5, 80003c8 <__udivmoddi4+0xa0>
 80003c0:	40d4      	lsrs	r4, r2
 80003c2:	2300      	movs	r3, #0
 80003c4:	e9c5 4300 	strd	r4, r3, [r5]
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	b902      	cbnz	r2, 80003d2 <__udivmoddi4+0xaa>
 80003d0:	deff      	udf	#255	; 0xff
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	2a00      	cmp	r2, #0
 80003d8:	d150      	bne.n	800047c <__udivmoddi4+0x154>
 80003da:	1bcb      	subs	r3, r1, r7
 80003dc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e0:	fa1f f887 	uxth.w	r8, r7
 80003e4:	2601      	movs	r6, #1
 80003e6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ea:	0c21      	lsrs	r1, r4, #16
 80003ec:	fb0e 331c 	mls	r3, lr, ip, r3
 80003f0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003f4:	fb08 f30c 	mul.w	r3, r8, ip
 80003f8:	428b      	cmp	r3, r1
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0xe4>
 80003fc:	1879      	adds	r1, r7, r1
 80003fe:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0xe2>
 8000404:	428b      	cmp	r3, r1
 8000406:	f200 80e9 	bhi.w	80005dc <__udivmoddi4+0x2b4>
 800040a:	4684      	mov	ip, r0
 800040c:	1ac9      	subs	r1, r1, r3
 800040e:	b2a3      	uxth	r3, r4
 8000410:	fbb1 f0fe 	udiv	r0, r1, lr
 8000414:	fb0e 1110 	mls	r1, lr, r0, r1
 8000418:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800041c:	fb08 f800 	mul.w	r8, r8, r0
 8000420:	45a0      	cmp	r8, r4
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x10c>
 8000424:	193c      	adds	r4, r7, r4
 8000426:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x10a>
 800042c:	45a0      	cmp	r8, r4
 800042e:	f200 80d9 	bhi.w	80005e4 <__udivmoddi4+0x2bc>
 8000432:	4618      	mov	r0, r3
 8000434:	eba4 0408 	sub.w	r4, r4, r8
 8000438:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800043c:	e7bf      	b.n	80003be <__udivmoddi4+0x96>
 800043e:	428b      	cmp	r3, r1
 8000440:	d909      	bls.n	8000456 <__udivmoddi4+0x12e>
 8000442:	2d00      	cmp	r5, #0
 8000444:	f000 80b1 	beq.w	80005aa <__udivmoddi4+0x282>
 8000448:	2600      	movs	r6, #0
 800044a:	e9c5 0100 	strd	r0, r1, [r5]
 800044e:	4630      	mov	r0, r6
 8000450:	4631      	mov	r1, r6
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	fab3 f683 	clz	r6, r3
 800045a:	2e00      	cmp	r6, #0
 800045c:	d14a      	bne.n	80004f4 <__udivmoddi4+0x1cc>
 800045e:	428b      	cmp	r3, r1
 8000460:	d302      	bcc.n	8000468 <__udivmoddi4+0x140>
 8000462:	4282      	cmp	r2, r0
 8000464:	f200 80b8 	bhi.w	80005d8 <__udivmoddi4+0x2b0>
 8000468:	1a84      	subs	r4, r0, r2
 800046a:	eb61 0103 	sbc.w	r1, r1, r3
 800046e:	2001      	movs	r0, #1
 8000470:	468c      	mov	ip, r1
 8000472:	2d00      	cmp	r5, #0
 8000474:	d0a8      	beq.n	80003c8 <__udivmoddi4+0xa0>
 8000476:	e9c5 4c00 	strd	r4, ip, [r5]
 800047a:	e7a5      	b.n	80003c8 <__udivmoddi4+0xa0>
 800047c:	f1c2 0320 	rsb	r3, r2, #32
 8000480:	fa20 f603 	lsr.w	r6, r0, r3
 8000484:	4097      	lsls	r7, r2
 8000486:	fa01 f002 	lsl.w	r0, r1, r2
 800048a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800048e:	40d9      	lsrs	r1, r3
 8000490:	4330      	orrs	r0, r6
 8000492:	0c03      	lsrs	r3, r0, #16
 8000494:	fbb1 f6fe 	udiv	r6, r1, lr
 8000498:	fa1f f887 	uxth.w	r8, r7
 800049c:	fb0e 1116 	mls	r1, lr, r6, r1
 80004a0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004a4:	fb06 f108 	mul.w	r1, r6, r8
 80004a8:	4299      	cmp	r1, r3
 80004aa:	fa04 f402 	lsl.w	r4, r4, r2
 80004ae:	d909      	bls.n	80004c4 <__udivmoddi4+0x19c>
 80004b0:	18fb      	adds	r3, r7, r3
 80004b2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80004b6:	f080 808d 	bcs.w	80005d4 <__udivmoddi4+0x2ac>
 80004ba:	4299      	cmp	r1, r3
 80004bc:	f240 808a 	bls.w	80005d4 <__udivmoddi4+0x2ac>
 80004c0:	3e02      	subs	r6, #2
 80004c2:	443b      	add	r3, r7
 80004c4:	1a5b      	subs	r3, r3, r1
 80004c6:	b281      	uxth	r1, r0
 80004c8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004cc:	fb0e 3310 	mls	r3, lr, r0, r3
 80004d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d4:	fb00 f308 	mul.w	r3, r0, r8
 80004d8:	428b      	cmp	r3, r1
 80004da:	d907      	bls.n	80004ec <__udivmoddi4+0x1c4>
 80004dc:	1879      	adds	r1, r7, r1
 80004de:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004e2:	d273      	bcs.n	80005cc <__udivmoddi4+0x2a4>
 80004e4:	428b      	cmp	r3, r1
 80004e6:	d971      	bls.n	80005cc <__udivmoddi4+0x2a4>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4439      	add	r1, r7
 80004ec:	1acb      	subs	r3, r1, r3
 80004ee:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004f2:	e778      	b.n	80003e6 <__udivmoddi4+0xbe>
 80004f4:	f1c6 0c20 	rsb	ip, r6, #32
 80004f8:	fa03 f406 	lsl.w	r4, r3, r6
 80004fc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000500:	431c      	orrs	r4, r3
 8000502:	fa20 f70c 	lsr.w	r7, r0, ip
 8000506:	fa01 f306 	lsl.w	r3, r1, r6
 800050a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800050e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000512:	431f      	orrs	r7, r3
 8000514:	0c3b      	lsrs	r3, r7, #16
 8000516:	fbb1 f9fe 	udiv	r9, r1, lr
 800051a:	fa1f f884 	uxth.w	r8, r4
 800051e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000522:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000526:	fb09 fa08 	mul.w	sl, r9, r8
 800052a:	458a      	cmp	sl, r1
 800052c:	fa02 f206 	lsl.w	r2, r2, r6
 8000530:	fa00 f306 	lsl.w	r3, r0, r6
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x220>
 8000536:	1861      	adds	r1, r4, r1
 8000538:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800053c:	d248      	bcs.n	80005d0 <__udivmoddi4+0x2a8>
 800053e:	458a      	cmp	sl, r1
 8000540:	d946      	bls.n	80005d0 <__udivmoddi4+0x2a8>
 8000542:	f1a9 0902 	sub.w	r9, r9, #2
 8000546:	4421      	add	r1, r4
 8000548:	eba1 010a 	sub.w	r1, r1, sl
 800054c:	b2bf      	uxth	r7, r7
 800054e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000552:	fb0e 1110 	mls	r1, lr, r0, r1
 8000556:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800055a:	fb00 f808 	mul.w	r8, r0, r8
 800055e:	45b8      	cmp	r8, r7
 8000560:	d907      	bls.n	8000572 <__udivmoddi4+0x24a>
 8000562:	19e7      	adds	r7, r4, r7
 8000564:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000568:	d22e      	bcs.n	80005c8 <__udivmoddi4+0x2a0>
 800056a:	45b8      	cmp	r8, r7
 800056c:	d92c      	bls.n	80005c8 <__udivmoddi4+0x2a0>
 800056e:	3802      	subs	r0, #2
 8000570:	4427      	add	r7, r4
 8000572:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000576:	eba7 0708 	sub.w	r7, r7, r8
 800057a:	fba0 8902 	umull	r8, r9, r0, r2
 800057e:	454f      	cmp	r7, r9
 8000580:	46c6      	mov	lr, r8
 8000582:	4649      	mov	r1, r9
 8000584:	d31a      	bcc.n	80005bc <__udivmoddi4+0x294>
 8000586:	d017      	beq.n	80005b8 <__udivmoddi4+0x290>
 8000588:	b15d      	cbz	r5, 80005a2 <__udivmoddi4+0x27a>
 800058a:	ebb3 020e 	subs.w	r2, r3, lr
 800058e:	eb67 0701 	sbc.w	r7, r7, r1
 8000592:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000596:	40f2      	lsrs	r2, r6
 8000598:	ea4c 0202 	orr.w	r2, ip, r2
 800059c:	40f7      	lsrs	r7, r6
 800059e:	e9c5 2700 	strd	r2, r7, [r5]
 80005a2:	2600      	movs	r6, #0
 80005a4:	4631      	mov	r1, r6
 80005a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005aa:	462e      	mov	r6, r5
 80005ac:	4628      	mov	r0, r5
 80005ae:	e70b      	b.n	80003c8 <__udivmoddi4+0xa0>
 80005b0:	4606      	mov	r6, r0
 80005b2:	e6e9      	b.n	8000388 <__udivmoddi4+0x60>
 80005b4:	4618      	mov	r0, r3
 80005b6:	e6fd      	b.n	80003b4 <__udivmoddi4+0x8c>
 80005b8:	4543      	cmp	r3, r8
 80005ba:	d2e5      	bcs.n	8000588 <__udivmoddi4+0x260>
 80005bc:	ebb8 0e02 	subs.w	lr, r8, r2
 80005c0:	eb69 0104 	sbc.w	r1, r9, r4
 80005c4:	3801      	subs	r0, #1
 80005c6:	e7df      	b.n	8000588 <__udivmoddi4+0x260>
 80005c8:	4608      	mov	r0, r1
 80005ca:	e7d2      	b.n	8000572 <__udivmoddi4+0x24a>
 80005cc:	4660      	mov	r0, ip
 80005ce:	e78d      	b.n	80004ec <__udivmoddi4+0x1c4>
 80005d0:	4681      	mov	r9, r0
 80005d2:	e7b9      	b.n	8000548 <__udivmoddi4+0x220>
 80005d4:	4666      	mov	r6, ip
 80005d6:	e775      	b.n	80004c4 <__udivmoddi4+0x19c>
 80005d8:	4630      	mov	r0, r6
 80005da:	e74a      	b.n	8000472 <__udivmoddi4+0x14a>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	4439      	add	r1, r7
 80005e2:	e713      	b.n	800040c <__udivmoddi4+0xe4>
 80005e4:	3802      	subs	r0, #2
 80005e6:	443c      	add	r4, r7
 80005e8:	e724      	b.n	8000434 <__udivmoddi4+0x10c>
 80005ea:	bf00      	nop

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f4:	f000 fa1c 	bl	8000a30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f8:	f000 f854 	bl	80006a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fc:	f000 f8ea 	bl	80007d4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000600:	f000 f8ba 	bl	8000778 <MX_I2C1_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      receiveDataFromESP32();
 8000604:	f000 f802 	bl	800060c <receiveDataFromESP32>
  {
 8000608:	e7fc      	b.n	8000604 <main+0x14>
	...

0800060c <receiveDataFromESP32>:
  }
  /* USER CODE END 3 */
}
void receiveDataFromESP32() {
 800060c:	b580      	push	{r7, lr}
 800060e:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
 8000612:	af02      	add	r7, sp, #8
    uint8_t buffer[1024];
    uint32_t fileSize = 0;
 8000614:	f107 030c 	add.w	r3, r7, #12
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
    uint8_t crc[8]; // Assuming CRC length is 8 bytes

    // Receive file size
    HAL_I2C_Master_Receive(&hi2c1, 0x08 << 1, (uint8_t*)&fileSize, sizeof(fileSize), HAL_MAX_DELAY);
 800061c:	f107 020c 	add.w	r2, r7, #12
 8000620:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000624:	9300      	str	r3, [sp, #0]
 8000626:	2304      	movs	r3, #4
 8000628:	2110      	movs	r1, #16
 800062a:	481d      	ldr	r0, [pc, #116]	; (80006a0 <receiveDataFromESP32+0x94>)
 800062c:	f000 fe52 	bl	80012d4 <HAL_I2C_Master_Receive>

    // Receive file data
    uint32_t bytesReceived = 0;
 8000630:	2300      	movs	r3, #0
 8000632:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
    while (bytesReceived < fileSize) {
 8000636:	e01e      	b.n	8000676 <receiveDataFromESP32+0x6a>
        uint16_t toReceive = (fileSize - bytesReceived > sizeof(buffer)) ? sizeof(buffer) : (fileSize - bytesReceived);
 8000638:	f107 030c 	add.w	r3, r7, #12
 800063c:	681a      	ldr	r2, [r3, #0]
 800063e:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8000642:	1ad3      	subs	r3, r2, r3
 8000644:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000648:	bf28      	it	cs
 800064a:	f44f 6380 	movcs.w	r3, #1024	; 0x400
 800064e:	f8a7 3412 	strh.w	r3, [r7, #1042]	; 0x412
        HAL_I2C_Master_Receive(&hi2c1, 0x08 << 1, buffer, toReceive, HAL_MAX_DELAY);
 8000652:	f8b7 3412 	ldrh.w	r3, [r7, #1042]	; 0x412
 8000656:	f107 0210 	add.w	r2, r7, #16
 800065a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800065e:	9100      	str	r1, [sp, #0]
 8000660:	2110      	movs	r1, #16
 8000662:	480f      	ldr	r0, [pc, #60]	; (80006a0 <receiveDataFromESP32+0x94>)
 8000664:	f000 fe36 	bl	80012d4 <HAL_I2C_Master_Receive>
        // Process received data...
        bytesReceived += toReceive;
 8000668:	f8b7 3412 	ldrh.w	r3, [r7, #1042]	; 0x412
 800066c:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 8000670:	4413      	add	r3, r2
 8000672:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
    while (bytesReceived < fileSize) {
 8000676:	f107 030c 	add.w	r3, r7, #12
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 8000680:	429a      	cmp	r2, r3
 8000682:	d3d9      	bcc.n	8000638 <receiveDataFromESP32+0x2c>
    }

    // Receive CRC
    HAL_I2C_Master_Receive(&hi2c1, 0x08 << 1, crc, sizeof(crc), HAL_MAX_DELAY);
 8000684:	1d3a      	adds	r2, r7, #4
 8000686:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800068a:	9300      	str	r3, [sp, #0]
 800068c:	2308      	movs	r3, #8
 800068e:	2110      	movs	r1, #16
 8000690:	4803      	ldr	r0, [pc, #12]	; (80006a0 <receiveDataFromESP32+0x94>)
 8000692:	f000 fe1f 	bl	80012d4 <HAL_I2C_Master_Receive>
    // Process received CRC...
}
 8000696:	bf00      	nop
 8000698:	f507 6783 	add.w	r7, r7, #1048	; 0x418
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	20000028 	.word	0x20000028

080006a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b094      	sub	sp, #80	; 0x50
 80006a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006aa:	f107 0320 	add.w	r3, r7, #32
 80006ae:	2230      	movs	r2, #48	; 0x30
 80006b0:	2100      	movs	r1, #0
 80006b2:	4618      	mov	r0, r3
 80006b4:	f7ff fdd0 	bl	8000258 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b8:	f107 030c 	add.w	r3, r7, #12
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	605a      	str	r2, [r3, #4]
 80006c2:	609a      	str	r2, [r3, #8]
 80006c4:	60da      	str	r2, [r3, #12]
 80006c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c8:	2300      	movs	r3, #0
 80006ca:	60bb      	str	r3, [r7, #8]
 80006cc:	4b28      	ldr	r3, [pc, #160]	; (8000770 <SystemClock_Config+0xcc>)
 80006ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d0:	4a27      	ldr	r2, [pc, #156]	; (8000770 <SystemClock_Config+0xcc>)
 80006d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006d6:	6413      	str	r3, [r2, #64]	; 0x40
 80006d8:	4b25      	ldr	r3, [pc, #148]	; (8000770 <SystemClock_Config+0xcc>)
 80006da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006e0:	60bb      	str	r3, [r7, #8]
 80006e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006e4:	2300      	movs	r3, #0
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	4b22      	ldr	r3, [pc, #136]	; (8000774 <SystemClock_Config+0xd0>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a21      	ldr	r2, [pc, #132]	; (8000774 <SystemClock_Config+0xd0>)
 80006ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006f2:	6013      	str	r3, [r2, #0]
 80006f4:	4b1f      	ldr	r3, [pc, #124]	; (8000774 <SystemClock_Config+0xd0>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006fc:	607b      	str	r3, [r7, #4]
 80006fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000700:	2302      	movs	r3, #2
 8000702:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000704:	2301      	movs	r3, #1
 8000706:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000708:	2310      	movs	r3, #16
 800070a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800070c:	2302      	movs	r3, #2
 800070e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000710:	2300      	movs	r3, #0
 8000712:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000714:	2308      	movs	r3, #8
 8000716:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000718:	2332      	movs	r3, #50	; 0x32
 800071a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800071c:	2304      	movs	r3, #4
 800071e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000720:	2307      	movs	r3, #7
 8000722:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000724:	f107 0320 	add.w	r3, r7, #32
 8000728:	4618      	mov	r0, r3
 800072a:	f001 fa4b 	bl	8001bc4 <HAL_RCC_OscConfig>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000734:	f000 f8a0 	bl	8000878 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000738:	230f      	movs	r3, #15
 800073a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800073c:	2302      	movs	r3, #2
 800073e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000740:	2300      	movs	r3, #0
 8000742:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000744:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000748:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800074a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800074e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000750:	f107 030c 	add.w	r3, r7, #12
 8000754:	2100      	movs	r1, #0
 8000756:	4618      	mov	r0, r3
 8000758:	f001 fcac 	bl	80020b4 <HAL_RCC_ClockConfig>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000762:	f000 f889 	bl	8000878 <Error_Handler>
  }
}
 8000766:	bf00      	nop
 8000768:	3750      	adds	r7, #80	; 0x50
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	40023800 	.word	0x40023800
 8000774:	40007000 	.word	0x40007000

08000778 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800077c:	4b12      	ldr	r3, [pc, #72]	; (80007c8 <MX_I2C1_Init+0x50>)
 800077e:	4a13      	ldr	r2, [pc, #76]	; (80007cc <MX_I2C1_Init+0x54>)
 8000780:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000782:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <MX_I2C1_Init+0x50>)
 8000784:	4a12      	ldr	r2, [pc, #72]	; (80007d0 <MX_I2C1_Init+0x58>)
 8000786:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000788:	4b0f      	ldr	r3, [pc, #60]	; (80007c8 <MX_I2C1_Init+0x50>)
 800078a:	2200      	movs	r2, #0
 800078c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800078e:	4b0e      	ldr	r3, [pc, #56]	; (80007c8 <MX_I2C1_Init+0x50>)
 8000790:	2200      	movs	r2, #0
 8000792:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000794:	4b0c      	ldr	r3, [pc, #48]	; (80007c8 <MX_I2C1_Init+0x50>)
 8000796:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800079a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800079c:	4b0a      	ldr	r3, [pc, #40]	; (80007c8 <MX_I2C1_Init+0x50>)
 800079e:	2200      	movs	r2, #0
 80007a0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007a2:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <MX_I2C1_Init+0x50>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007a8:	4b07      	ldr	r3, [pc, #28]	; (80007c8 <MX_I2C1_Init+0x50>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007ae:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <MX_I2C1_Init+0x50>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007b4:	4804      	ldr	r0, [pc, #16]	; (80007c8 <MX_I2C1_Init+0x50>)
 80007b6:	f000 fc49 	bl	800104c <HAL_I2C_Init>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007c0:	f000 f85a 	bl	8000878 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007c4:	bf00      	nop
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	20000028 	.word	0x20000028
 80007cc:	40005400 	.word	0x40005400
 80007d0:	000186a0 	.word	0x000186a0

080007d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b088      	sub	sp, #32
 80007d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007da:	f107 030c 	add.w	r3, r7, #12
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	605a      	str	r2, [r3, #4]
 80007e4:	609a      	str	r2, [r3, #8]
 80007e6:	60da      	str	r2, [r3, #12]
 80007e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	60bb      	str	r3, [r7, #8]
 80007ee:	4b20      	ldr	r3, [pc, #128]	; (8000870 <MX_GPIO_Init+0x9c>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a1f      	ldr	r2, [pc, #124]	; (8000870 <MX_GPIO_Init+0x9c>)
 80007f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b1d      	ldr	r3, [pc, #116]	; (8000870 <MX_GPIO_Init+0x9c>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000802:	60bb      	str	r3, [r7, #8]
 8000804:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	607b      	str	r3, [r7, #4]
 800080a:	4b19      	ldr	r3, [pc, #100]	; (8000870 <MX_GPIO_Init+0x9c>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	4a18      	ldr	r2, [pc, #96]	; (8000870 <MX_GPIO_Init+0x9c>)
 8000810:	f043 0308 	orr.w	r3, r3, #8
 8000814:	6313      	str	r3, [r2, #48]	; 0x30
 8000816:	4b16      	ldr	r3, [pc, #88]	; (8000870 <MX_GPIO_Init+0x9c>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	f003 0308 	and.w	r3, r3, #8
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	603b      	str	r3, [r7, #0]
 8000826:	4b12      	ldr	r3, [pc, #72]	; (8000870 <MX_GPIO_Init+0x9c>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	4a11      	ldr	r2, [pc, #68]	; (8000870 <MX_GPIO_Init+0x9c>)
 800082c:	f043 0302 	orr.w	r3, r3, #2
 8000830:	6313      	str	r3, [r2, #48]	; 0x30
 8000832:	4b0f      	ldr	r3, [pc, #60]	; (8000870 <MX_GPIO_Init+0x9c>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	f003 0302 	and.w	r3, r3, #2
 800083a:	603b      	str	r3, [r7, #0]
 800083c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800083e:	2200      	movs	r2, #0
 8000840:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000844:	480b      	ldr	r0, [pc, #44]	; (8000874 <MX_GPIO_Init+0xa0>)
 8000846:	f000 fbe7 	bl	8001018 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800084a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800084e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000850:	2301      	movs	r3, #1
 8000852:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000858:	2300      	movs	r3, #0
 800085a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800085c:	f107 030c 	add.w	r3, r7, #12
 8000860:	4619      	mov	r1, r3
 8000862:	4804      	ldr	r0, [pc, #16]	; (8000874 <MX_GPIO_Init+0xa0>)
 8000864:	f000 fa3c 	bl	8000ce0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000868:	bf00      	nop
 800086a:	3720      	adds	r7, #32
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	40023800 	.word	0x40023800
 8000874:	40020c00 	.word	0x40020c00

08000878 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800087c:	b672      	cpsid	i
}
 800087e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000880:	e7fe      	b.n	8000880 <Error_Handler+0x8>
	...

08000884 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	607b      	str	r3, [r7, #4]
 800088e:	4b10      	ldr	r3, [pc, #64]	; (80008d0 <HAL_MspInit+0x4c>)
 8000890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000892:	4a0f      	ldr	r2, [pc, #60]	; (80008d0 <HAL_MspInit+0x4c>)
 8000894:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000898:	6453      	str	r3, [r2, #68]	; 0x44
 800089a:	4b0d      	ldr	r3, [pc, #52]	; (80008d0 <HAL_MspInit+0x4c>)
 800089c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800089e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	603b      	str	r3, [r7, #0]
 80008aa:	4b09      	ldr	r3, [pc, #36]	; (80008d0 <HAL_MspInit+0x4c>)
 80008ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ae:	4a08      	ldr	r2, [pc, #32]	; (80008d0 <HAL_MspInit+0x4c>)
 80008b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008b4:	6413      	str	r3, [r2, #64]	; 0x40
 80008b6:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <HAL_MspInit+0x4c>)
 80008b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008be:	603b      	str	r3, [r7, #0]
 80008c0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80008c2:	2007      	movs	r0, #7
 80008c4:	f000 f9d8 	bl	8000c78 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008c8:	bf00      	nop
 80008ca:	3708      	adds	r7, #8
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	40023800 	.word	0x40023800

080008d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b08a      	sub	sp, #40	; 0x28
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008dc:	f107 0314 	add.w	r3, r7, #20
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	605a      	str	r2, [r3, #4]
 80008e6:	609a      	str	r2, [r3, #8]
 80008e8:	60da      	str	r2, [r3, #12]
 80008ea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a19      	ldr	r2, [pc, #100]	; (8000958 <HAL_I2C_MspInit+0x84>)
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d12b      	bne.n	800094e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	613b      	str	r3, [r7, #16]
 80008fa:	4b18      	ldr	r3, [pc, #96]	; (800095c <HAL_I2C_MspInit+0x88>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	4a17      	ldr	r2, [pc, #92]	; (800095c <HAL_I2C_MspInit+0x88>)
 8000900:	f043 0302 	orr.w	r3, r3, #2
 8000904:	6313      	str	r3, [r2, #48]	; 0x30
 8000906:	4b15      	ldr	r3, [pc, #84]	; (800095c <HAL_I2C_MspInit+0x88>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	f003 0302 	and.w	r3, r3, #2
 800090e:	613b      	str	r3, [r7, #16]
 8000910:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000912:	23c0      	movs	r3, #192	; 0xc0
 8000914:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000916:	2312      	movs	r3, #18
 8000918:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800091e:	2303      	movs	r3, #3
 8000920:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000922:	2304      	movs	r3, #4
 8000924:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000926:	f107 0314 	add.w	r3, r7, #20
 800092a:	4619      	mov	r1, r3
 800092c:	480c      	ldr	r0, [pc, #48]	; (8000960 <HAL_I2C_MspInit+0x8c>)
 800092e:	f000 f9d7 	bl	8000ce0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	60fb      	str	r3, [r7, #12]
 8000936:	4b09      	ldr	r3, [pc, #36]	; (800095c <HAL_I2C_MspInit+0x88>)
 8000938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093a:	4a08      	ldr	r2, [pc, #32]	; (800095c <HAL_I2C_MspInit+0x88>)
 800093c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000940:	6413      	str	r3, [r2, #64]	; 0x40
 8000942:	4b06      	ldr	r3, [pc, #24]	; (800095c <HAL_I2C_MspInit+0x88>)
 8000944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000946:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800094e:	bf00      	nop
 8000950:	3728      	adds	r7, #40	; 0x28
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	40005400 	.word	0x40005400
 800095c:	40023800 	.word	0x40023800
 8000960:	40020400 	.word	0x40020400

08000964 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000968:	e7fe      	b.n	8000968 <NMI_Handler+0x4>

0800096a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800096a:	b480      	push	{r7}
 800096c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800096e:	e7fe      	b.n	800096e <HardFault_Handler+0x4>

08000970 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000974:	e7fe      	b.n	8000974 <MemManage_Handler+0x4>

08000976 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000976:	b480      	push	{r7}
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800097a:	e7fe      	b.n	800097a <BusFault_Handler+0x4>

0800097c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000980:	e7fe      	b.n	8000980 <UsageFault_Handler+0x4>

08000982 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000982:	b480      	push	{r7}
 8000984:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000986:	bf00      	nop
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr

08000990 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000994:	bf00      	nop
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr

0800099e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800099e:	b480      	push	{r7}
 80009a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009a2:	bf00      	nop
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr

080009ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009b0:	f000 f890 	bl	8000ad4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009b4:	bf00      	nop
 80009b6:	bd80      	pop	{r7, pc}

080009b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009bc:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <SystemInit+0x20>)
 80009be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009c2:	4a05      	ldr	r2, [pc, #20]	; (80009d8 <SystemInit+0x20>)
 80009c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009cc:	bf00      	nop
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	e000ed00 	.word	0xe000ed00

080009dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80009dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a14 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80009e0:	f7ff ffea 	bl	80009b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009e4:	480c      	ldr	r0, [pc, #48]	; (8000a18 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009e6:	490d      	ldr	r1, [pc, #52]	; (8000a1c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009e8:	4a0d      	ldr	r2, [pc, #52]	; (8000a20 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009ec:	e002      	b.n	80009f4 <LoopCopyDataInit>

080009ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009f2:	3304      	adds	r3, #4

080009f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009f8:	d3f9      	bcc.n	80009ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009fa:	4a0a      	ldr	r2, [pc, #40]	; (8000a24 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009fc:	4c0a      	ldr	r4, [pc, #40]	; (8000a28 <LoopFillZerobss+0x22>)
  movs r3, #0
 80009fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a00:	e001      	b.n	8000a06 <LoopFillZerobss>

08000a02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a04:	3204      	adds	r2, #4

08000a06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a08:	d3fb      	bcc.n	8000a02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a0a:	f7ff fc01 	bl	8000210 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a0e:	f7ff fdef 	bl	80005f0 <main>
  bx  lr    
 8000a12:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a14:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a1c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a20:	080024c4 	.word	0x080024c4
  ldr r2, =_sbss
 8000a24:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a28:	20000080 	.word	0x20000080

08000a2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a2c:	e7fe      	b.n	8000a2c <ADC_IRQHandler>
	...

08000a30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a34:	4b0e      	ldr	r3, [pc, #56]	; (8000a70 <HAL_Init+0x40>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a0d      	ldr	r2, [pc, #52]	; (8000a70 <HAL_Init+0x40>)
 8000a3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a40:	4b0b      	ldr	r3, [pc, #44]	; (8000a70 <HAL_Init+0x40>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a0a      	ldr	r2, [pc, #40]	; (8000a70 <HAL_Init+0x40>)
 8000a46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a4c:	4b08      	ldr	r3, [pc, #32]	; (8000a70 <HAL_Init+0x40>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a07      	ldr	r2, [pc, #28]	; (8000a70 <HAL_Init+0x40>)
 8000a52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a58:	2003      	movs	r0, #3
 8000a5a:	f000 f90d 	bl	8000c78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a5e:	2000      	movs	r0, #0
 8000a60:	f000 f808 	bl	8000a74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a64:	f7ff ff0e 	bl	8000884 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a68:	2300      	movs	r3, #0
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	40023c00 	.word	0x40023c00

08000a74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a7c:	4b12      	ldr	r3, [pc, #72]	; (8000ac8 <HAL_InitTick+0x54>)
 8000a7e:	681a      	ldr	r2, [r3, #0]
 8000a80:	4b12      	ldr	r3, [pc, #72]	; (8000acc <HAL_InitTick+0x58>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	4619      	mov	r1, r3
 8000a86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a92:	4618      	mov	r0, r3
 8000a94:	f000 f917 	bl	8000cc6 <HAL_SYSTICK_Config>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	e00e      	b.n	8000ac0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	2b0f      	cmp	r3, #15
 8000aa6:	d80a      	bhi.n	8000abe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	6879      	ldr	r1, [r7, #4]
 8000aac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ab0:	f000 f8ed 	bl	8000c8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ab4:	4a06      	ldr	r2, [pc, #24]	; (8000ad0 <HAL_InitTick+0x5c>)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000aba:	2300      	movs	r3, #0
 8000abc:	e000      	b.n	8000ac0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000abe:	2301      	movs	r3, #1
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3708      	adds	r7, #8
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	20000000 	.word	0x20000000
 8000acc:	20000008 	.word	0x20000008
 8000ad0:	20000004 	.word	0x20000004

08000ad4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ad8:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <HAL_IncTick+0x20>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	461a      	mov	r2, r3
 8000ade:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <HAL_IncTick+0x24>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	4413      	add	r3, r2
 8000ae4:	4a04      	ldr	r2, [pc, #16]	; (8000af8 <HAL_IncTick+0x24>)
 8000ae6:	6013      	str	r3, [r2, #0]
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	20000008 	.word	0x20000008
 8000af8:	2000007c 	.word	0x2000007c

08000afc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  return uwTick;
 8000b00:	4b03      	ldr	r3, [pc, #12]	; (8000b10 <HAL_GetTick+0x14>)
 8000b02:	681b      	ldr	r3, [r3, #0]
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	2000007c 	.word	0x2000007c

08000b14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b085      	sub	sp, #20
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	f003 0307 	and.w	r3, r3, #7
 8000b22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b24:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <__NVIC_SetPriorityGrouping+0x44>)
 8000b26:	68db      	ldr	r3, [r3, #12]
 8000b28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b2a:	68ba      	ldr	r2, [r7, #8]
 8000b2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b30:	4013      	ands	r3, r2
 8000b32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b46:	4a04      	ldr	r2, [pc, #16]	; (8000b58 <__NVIC_SetPriorityGrouping+0x44>)
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	60d3      	str	r3, [r2, #12]
}
 8000b4c:	bf00      	nop
 8000b4e:	3714      	adds	r7, #20
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr
 8000b58:	e000ed00 	.word	0xe000ed00

08000b5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b60:	4b04      	ldr	r3, [pc, #16]	; (8000b74 <__NVIC_GetPriorityGrouping+0x18>)
 8000b62:	68db      	ldr	r3, [r3, #12]
 8000b64:	0a1b      	lsrs	r3, r3, #8
 8000b66:	f003 0307 	and.w	r3, r3, #7
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr
 8000b74:	e000ed00 	.word	0xe000ed00

08000b78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	6039      	str	r1, [r7, #0]
 8000b82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	db0a      	blt.n	8000ba2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	b2da      	uxtb	r2, r3
 8000b90:	490c      	ldr	r1, [pc, #48]	; (8000bc4 <__NVIC_SetPriority+0x4c>)
 8000b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b96:	0112      	lsls	r2, r2, #4
 8000b98:	b2d2      	uxtb	r2, r2
 8000b9a:	440b      	add	r3, r1
 8000b9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ba0:	e00a      	b.n	8000bb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	b2da      	uxtb	r2, r3
 8000ba6:	4908      	ldr	r1, [pc, #32]	; (8000bc8 <__NVIC_SetPriority+0x50>)
 8000ba8:	79fb      	ldrb	r3, [r7, #7]
 8000baa:	f003 030f 	and.w	r3, r3, #15
 8000bae:	3b04      	subs	r3, #4
 8000bb0:	0112      	lsls	r2, r2, #4
 8000bb2:	b2d2      	uxtb	r2, r2
 8000bb4:	440b      	add	r3, r1
 8000bb6:	761a      	strb	r2, [r3, #24]
}
 8000bb8:	bf00      	nop
 8000bba:	370c      	adds	r7, #12
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr
 8000bc4:	e000e100 	.word	0xe000e100
 8000bc8:	e000ed00 	.word	0xe000ed00

08000bcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b089      	sub	sp, #36	; 0x24
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	60f8      	str	r0, [r7, #12]
 8000bd4:	60b9      	str	r1, [r7, #8]
 8000bd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	f003 0307 	and.w	r3, r3, #7
 8000bde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000be0:	69fb      	ldr	r3, [r7, #28]
 8000be2:	f1c3 0307 	rsb	r3, r3, #7
 8000be6:	2b04      	cmp	r3, #4
 8000be8:	bf28      	it	cs
 8000bea:	2304      	movcs	r3, #4
 8000bec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bee:	69fb      	ldr	r3, [r7, #28]
 8000bf0:	3304      	adds	r3, #4
 8000bf2:	2b06      	cmp	r3, #6
 8000bf4:	d902      	bls.n	8000bfc <NVIC_EncodePriority+0x30>
 8000bf6:	69fb      	ldr	r3, [r7, #28]
 8000bf8:	3b03      	subs	r3, #3
 8000bfa:	e000      	b.n	8000bfe <NVIC_EncodePriority+0x32>
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c04:	69bb      	ldr	r3, [r7, #24]
 8000c06:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0a:	43da      	mvns	r2, r3
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	401a      	ands	r2, r3
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c14:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c1e:	43d9      	mvns	r1, r3
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c24:	4313      	orrs	r3, r2
         );
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3724      	adds	r7, #36	; 0x24
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
	...

08000c34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	3b01      	subs	r3, #1
 8000c40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c44:	d301      	bcc.n	8000c4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c46:	2301      	movs	r3, #1
 8000c48:	e00f      	b.n	8000c6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c4a:	4a0a      	ldr	r2, [pc, #40]	; (8000c74 <SysTick_Config+0x40>)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	3b01      	subs	r3, #1
 8000c50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c52:	210f      	movs	r1, #15
 8000c54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c58:	f7ff ff8e 	bl	8000b78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c5c:	4b05      	ldr	r3, [pc, #20]	; (8000c74 <SysTick_Config+0x40>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c62:	4b04      	ldr	r3, [pc, #16]	; (8000c74 <SysTick_Config+0x40>)
 8000c64:	2207      	movs	r2, #7
 8000c66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c68:	2300      	movs	r3, #0
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	e000e010 	.word	0xe000e010

08000c78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c80:	6878      	ldr	r0, [r7, #4]
 8000c82:	f7ff ff47 	bl	8000b14 <__NVIC_SetPriorityGrouping>
}
 8000c86:	bf00      	nop
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	b086      	sub	sp, #24
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	4603      	mov	r3, r0
 8000c96:	60b9      	str	r1, [r7, #8]
 8000c98:	607a      	str	r2, [r7, #4]
 8000c9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ca0:	f7ff ff5c 	bl	8000b5c <__NVIC_GetPriorityGrouping>
 8000ca4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ca6:	687a      	ldr	r2, [r7, #4]
 8000ca8:	68b9      	ldr	r1, [r7, #8]
 8000caa:	6978      	ldr	r0, [r7, #20]
 8000cac:	f7ff ff8e 	bl	8000bcc <NVIC_EncodePriority>
 8000cb0:	4602      	mov	r2, r0
 8000cb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cb6:	4611      	mov	r1, r2
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f7ff ff5d 	bl	8000b78 <__NVIC_SetPriority>
}
 8000cbe:	bf00      	nop
 8000cc0:	3718      	adds	r7, #24
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}

08000cc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	b082      	sub	sp, #8
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cce:	6878      	ldr	r0, [r7, #4]
 8000cd0:	f7ff ffb0 	bl	8000c34 <SysTick_Config>
 8000cd4:	4603      	mov	r3, r0
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
	...

08000ce0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b089      	sub	sp, #36	; 0x24
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000cea:	2300      	movs	r3, #0
 8000cec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	61fb      	str	r3, [r7, #28]
 8000cfa:	e16b      	b.n	8000fd4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	fa02 f303 	lsl.w	r3, r2, r3
 8000d04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	697a      	ldr	r2, [r7, #20]
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d10:	693a      	ldr	r2, [r7, #16]
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	429a      	cmp	r2, r3
 8000d16:	f040 815a 	bne.w	8000fce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	f003 0303 	and.w	r3, r3, #3
 8000d22:	2b01      	cmp	r3, #1
 8000d24:	d005      	beq.n	8000d32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d2e:	2b02      	cmp	r3, #2
 8000d30:	d130      	bne.n	8000d94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	689b      	ldr	r3, [r3, #8]
 8000d36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d38:	69fb      	ldr	r3, [r7, #28]
 8000d3a:	005b      	lsls	r3, r3, #1
 8000d3c:	2203      	movs	r2, #3
 8000d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d42:	43db      	mvns	r3, r3
 8000d44:	69ba      	ldr	r2, [r7, #24]
 8000d46:	4013      	ands	r3, r2
 8000d48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	68da      	ldr	r2, [r3, #12]
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	005b      	lsls	r3, r3, #1
 8000d52:	fa02 f303 	lsl.w	r3, r2, r3
 8000d56:	69ba      	ldr	r2, [r7, #24]
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	69ba      	ldr	r2, [r7, #24]
 8000d60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d68:	2201      	movs	r2, #1
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d70:	43db      	mvns	r3, r3
 8000d72:	69ba      	ldr	r2, [r7, #24]
 8000d74:	4013      	ands	r3, r2
 8000d76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	091b      	lsrs	r3, r3, #4
 8000d7e:	f003 0201 	and.w	r2, r3, #1
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	fa02 f303 	lsl.w	r3, r2, r3
 8000d88:	69ba      	ldr	r2, [r7, #24]
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	69ba      	ldr	r2, [r7, #24]
 8000d92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	f003 0303 	and.w	r3, r3, #3
 8000d9c:	2b03      	cmp	r3, #3
 8000d9e:	d017      	beq.n	8000dd0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	68db      	ldr	r3, [r3, #12]
 8000da4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	005b      	lsls	r3, r3, #1
 8000daa:	2203      	movs	r2, #3
 8000dac:	fa02 f303 	lsl.w	r3, r2, r3
 8000db0:	43db      	mvns	r3, r3
 8000db2:	69ba      	ldr	r2, [r7, #24]
 8000db4:	4013      	ands	r3, r2
 8000db6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	689a      	ldr	r2, [r3, #8]
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	005b      	lsls	r3, r3, #1
 8000dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc4:	69ba      	ldr	r2, [r7, #24]
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	69ba      	ldr	r2, [r7, #24]
 8000dce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	f003 0303 	and.w	r3, r3, #3
 8000dd8:	2b02      	cmp	r3, #2
 8000dda:	d123      	bne.n	8000e24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	08da      	lsrs	r2, r3, #3
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	3208      	adds	r2, #8
 8000de4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000de8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	f003 0307 	and.w	r3, r3, #7
 8000df0:	009b      	lsls	r3, r3, #2
 8000df2:	220f      	movs	r2, #15
 8000df4:	fa02 f303 	lsl.w	r3, r2, r3
 8000df8:	43db      	mvns	r3, r3
 8000dfa:	69ba      	ldr	r2, [r7, #24]
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	691a      	ldr	r2, [r3, #16]
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	f003 0307 	and.w	r3, r3, #7
 8000e0a:	009b      	lsls	r3, r3, #2
 8000e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e10:	69ba      	ldr	r2, [r7, #24]
 8000e12:	4313      	orrs	r3, r2
 8000e14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	08da      	lsrs	r2, r3, #3
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	3208      	adds	r2, #8
 8000e1e:	69b9      	ldr	r1, [r7, #24]
 8000e20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	005b      	lsls	r3, r3, #1
 8000e2e:	2203      	movs	r2, #3
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	43db      	mvns	r3, r3
 8000e36:	69ba      	ldr	r2, [r7, #24]
 8000e38:	4013      	ands	r3, r2
 8000e3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f003 0203 	and.w	r2, r3, #3
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	005b      	lsls	r3, r3, #1
 8000e48:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4c:	69ba      	ldr	r2, [r7, #24]
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	f000 80b4 	beq.w	8000fce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	60fb      	str	r3, [r7, #12]
 8000e6a:	4b60      	ldr	r3, [pc, #384]	; (8000fec <HAL_GPIO_Init+0x30c>)
 8000e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e6e:	4a5f      	ldr	r2, [pc, #380]	; (8000fec <HAL_GPIO_Init+0x30c>)
 8000e70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e74:	6453      	str	r3, [r2, #68]	; 0x44
 8000e76:	4b5d      	ldr	r3, [pc, #372]	; (8000fec <HAL_GPIO_Init+0x30c>)
 8000e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e82:	4a5b      	ldr	r2, [pc, #364]	; (8000ff0 <HAL_GPIO_Init+0x310>)
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	089b      	lsrs	r3, r3, #2
 8000e88:	3302      	adds	r3, #2
 8000e8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	f003 0303 	and.w	r3, r3, #3
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	220f      	movs	r2, #15
 8000e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9e:	43db      	mvns	r3, r3
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4a52      	ldr	r2, [pc, #328]	; (8000ff4 <HAL_GPIO_Init+0x314>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d02b      	beq.n	8000f06 <HAL_GPIO_Init+0x226>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4a51      	ldr	r2, [pc, #324]	; (8000ff8 <HAL_GPIO_Init+0x318>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d025      	beq.n	8000f02 <HAL_GPIO_Init+0x222>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4a50      	ldr	r2, [pc, #320]	; (8000ffc <HAL_GPIO_Init+0x31c>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d01f      	beq.n	8000efe <HAL_GPIO_Init+0x21e>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4a4f      	ldr	r2, [pc, #316]	; (8001000 <HAL_GPIO_Init+0x320>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d019      	beq.n	8000efa <HAL_GPIO_Init+0x21a>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4a4e      	ldr	r2, [pc, #312]	; (8001004 <HAL_GPIO_Init+0x324>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d013      	beq.n	8000ef6 <HAL_GPIO_Init+0x216>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4a4d      	ldr	r2, [pc, #308]	; (8001008 <HAL_GPIO_Init+0x328>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d00d      	beq.n	8000ef2 <HAL_GPIO_Init+0x212>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4a4c      	ldr	r2, [pc, #304]	; (800100c <HAL_GPIO_Init+0x32c>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d007      	beq.n	8000eee <HAL_GPIO_Init+0x20e>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4a4b      	ldr	r2, [pc, #300]	; (8001010 <HAL_GPIO_Init+0x330>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d101      	bne.n	8000eea <HAL_GPIO_Init+0x20a>
 8000ee6:	2307      	movs	r3, #7
 8000ee8:	e00e      	b.n	8000f08 <HAL_GPIO_Init+0x228>
 8000eea:	2308      	movs	r3, #8
 8000eec:	e00c      	b.n	8000f08 <HAL_GPIO_Init+0x228>
 8000eee:	2306      	movs	r3, #6
 8000ef0:	e00a      	b.n	8000f08 <HAL_GPIO_Init+0x228>
 8000ef2:	2305      	movs	r3, #5
 8000ef4:	e008      	b.n	8000f08 <HAL_GPIO_Init+0x228>
 8000ef6:	2304      	movs	r3, #4
 8000ef8:	e006      	b.n	8000f08 <HAL_GPIO_Init+0x228>
 8000efa:	2303      	movs	r3, #3
 8000efc:	e004      	b.n	8000f08 <HAL_GPIO_Init+0x228>
 8000efe:	2302      	movs	r3, #2
 8000f00:	e002      	b.n	8000f08 <HAL_GPIO_Init+0x228>
 8000f02:	2301      	movs	r3, #1
 8000f04:	e000      	b.n	8000f08 <HAL_GPIO_Init+0x228>
 8000f06:	2300      	movs	r3, #0
 8000f08:	69fa      	ldr	r2, [r7, #28]
 8000f0a:	f002 0203 	and.w	r2, r2, #3
 8000f0e:	0092      	lsls	r2, r2, #2
 8000f10:	4093      	lsls	r3, r2
 8000f12:	69ba      	ldr	r2, [r7, #24]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f18:	4935      	ldr	r1, [pc, #212]	; (8000ff0 <HAL_GPIO_Init+0x310>)
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	089b      	lsrs	r3, r3, #2
 8000f1e:	3302      	adds	r3, #2
 8000f20:	69ba      	ldr	r2, [r7, #24]
 8000f22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f26:	4b3b      	ldr	r3, [pc, #236]	; (8001014 <HAL_GPIO_Init+0x334>)
 8000f28:	689b      	ldr	r3, [r3, #8]
 8000f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	43db      	mvns	r3, r3
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	4013      	ands	r3, r2
 8000f34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d003      	beq.n	8000f4a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000f42:	69ba      	ldr	r2, [r7, #24]
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f4a:	4a32      	ldr	r2, [pc, #200]	; (8001014 <HAL_GPIO_Init+0x334>)
 8000f4c:	69bb      	ldr	r3, [r7, #24]
 8000f4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f50:	4b30      	ldr	r3, [pc, #192]	; (8001014 <HAL_GPIO_Init+0x334>)
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	43db      	mvns	r3, r3
 8000f5a:	69ba      	ldr	r2, [r7, #24]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d003      	beq.n	8000f74 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f74:	4a27      	ldr	r2, [pc, #156]	; (8001014 <HAL_GPIO_Init+0x334>)
 8000f76:	69bb      	ldr	r3, [r7, #24]
 8000f78:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f7a:	4b26      	ldr	r3, [pc, #152]	; (8001014 <HAL_GPIO_Init+0x334>)
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	43db      	mvns	r3, r3
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	4013      	ands	r3, r2
 8000f88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d003      	beq.n	8000f9e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000f96:	69ba      	ldr	r2, [r7, #24]
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f9e:	4a1d      	ldr	r2, [pc, #116]	; (8001014 <HAL_GPIO_Init+0x334>)
 8000fa0:	69bb      	ldr	r3, [r7, #24]
 8000fa2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fa4:	4b1b      	ldr	r3, [pc, #108]	; (8001014 <HAL_GPIO_Init+0x334>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	43db      	mvns	r3, r3
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d003      	beq.n	8000fc8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fc8:	4a12      	ldr	r2, [pc, #72]	; (8001014 <HAL_GPIO_Init+0x334>)
 8000fca:	69bb      	ldr	r3, [r7, #24]
 8000fcc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	61fb      	str	r3, [r7, #28]
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	2b0f      	cmp	r3, #15
 8000fd8:	f67f ae90 	bls.w	8000cfc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fdc:	bf00      	nop
 8000fde:	bf00      	nop
 8000fe0:	3724      	adds	r7, #36	; 0x24
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	40023800 	.word	0x40023800
 8000ff0:	40013800 	.word	0x40013800
 8000ff4:	40020000 	.word	0x40020000
 8000ff8:	40020400 	.word	0x40020400
 8000ffc:	40020800 	.word	0x40020800
 8001000:	40020c00 	.word	0x40020c00
 8001004:	40021000 	.word	0x40021000
 8001008:	40021400 	.word	0x40021400
 800100c:	40021800 	.word	0x40021800
 8001010:	40021c00 	.word	0x40021c00
 8001014:	40013c00 	.word	0x40013c00

08001018 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	460b      	mov	r3, r1
 8001022:	807b      	strh	r3, [r7, #2]
 8001024:	4613      	mov	r3, r2
 8001026:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001028:	787b      	ldrb	r3, [r7, #1]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d003      	beq.n	8001036 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800102e:	887a      	ldrh	r2, [r7, #2]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001034:	e003      	b.n	800103e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001036:	887b      	ldrh	r3, [r7, #2]
 8001038:	041a      	lsls	r2, r3, #16
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	619a      	str	r2, [r3, #24]
}
 800103e:	bf00      	nop
 8001040:	370c      	adds	r7, #12
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
	...

0800104c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d101      	bne.n	800105e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800105a:	2301      	movs	r3, #1
 800105c:	e12b      	b.n	80012b6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001064:	b2db      	uxtb	r3, r3
 8001066:	2b00      	cmp	r3, #0
 8001068:	d106      	bne.n	8001078 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2200      	movs	r2, #0
 800106e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f7ff fc2e 	bl	80008d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2224      	movs	r2, #36	; 0x24
 800107c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f022 0201 	bic.w	r2, r2, #1
 800108e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800109e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80010ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80010b0:	f001 f9d4 	bl	800245c <HAL_RCC_GetPCLK1Freq>
 80010b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	4a81      	ldr	r2, [pc, #516]	; (80012c0 <HAL_I2C_Init+0x274>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d807      	bhi.n	80010d0 <HAL_I2C_Init+0x84>
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	4a80      	ldr	r2, [pc, #512]	; (80012c4 <HAL_I2C_Init+0x278>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	bf94      	ite	ls
 80010c8:	2301      	movls	r3, #1
 80010ca:	2300      	movhi	r3, #0
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	e006      	b.n	80010de <HAL_I2C_Init+0x92>
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	4a7d      	ldr	r2, [pc, #500]	; (80012c8 <HAL_I2C_Init+0x27c>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	bf94      	ite	ls
 80010d8:	2301      	movls	r3, #1
 80010da:	2300      	movhi	r3, #0
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e0e7      	b.n	80012b6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	4a78      	ldr	r2, [pc, #480]	; (80012cc <HAL_I2C_Init+0x280>)
 80010ea:	fba2 2303 	umull	r2, r3, r2, r3
 80010ee:	0c9b      	lsrs	r3, r3, #18
 80010f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	68ba      	ldr	r2, [r7, #8]
 8001102:	430a      	orrs	r2, r1
 8001104:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	6a1b      	ldr	r3, [r3, #32]
 800110c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	4a6a      	ldr	r2, [pc, #424]	; (80012c0 <HAL_I2C_Init+0x274>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d802      	bhi.n	8001120 <HAL_I2C_Init+0xd4>
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	3301      	adds	r3, #1
 800111e:	e009      	b.n	8001134 <HAL_I2C_Init+0xe8>
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001126:	fb02 f303 	mul.w	r3, r2, r3
 800112a:	4a69      	ldr	r2, [pc, #420]	; (80012d0 <HAL_I2C_Init+0x284>)
 800112c:	fba2 2303 	umull	r2, r3, r2, r3
 8001130:	099b      	lsrs	r3, r3, #6
 8001132:	3301      	adds	r3, #1
 8001134:	687a      	ldr	r2, [r7, #4]
 8001136:	6812      	ldr	r2, [r2, #0]
 8001138:	430b      	orrs	r3, r1
 800113a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	69db      	ldr	r3, [r3, #28]
 8001142:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001146:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	495c      	ldr	r1, [pc, #368]	; (80012c0 <HAL_I2C_Init+0x274>)
 8001150:	428b      	cmp	r3, r1
 8001152:	d819      	bhi.n	8001188 <HAL_I2C_Init+0x13c>
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	1e59      	subs	r1, r3, #1
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001162:	1c59      	adds	r1, r3, #1
 8001164:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001168:	400b      	ands	r3, r1
 800116a:	2b00      	cmp	r3, #0
 800116c:	d00a      	beq.n	8001184 <HAL_I2C_Init+0x138>
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	1e59      	subs	r1, r3, #1
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	fbb1 f3f3 	udiv	r3, r1, r3
 800117c:	3301      	adds	r3, #1
 800117e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001182:	e051      	b.n	8001228 <HAL_I2C_Init+0x1dc>
 8001184:	2304      	movs	r3, #4
 8001186:	e04f      	b.n	8001228 <HAL_I2C_Init+0x1dc>
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d111      	bne.n	80011b4 <HAL_I2C_Init+0x168>
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	1e58      	subs	r0, r3, #1
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6859      	ldr	r1, [r3, #4]
 8001198:	460b      	mov	r3, r1
 800119a:	005b      	lsls	r3, r3, #1
 800119c:	440b      	add	r3, r1
 800119e:	fbb0 f3f3 	udiv	r3, r0, r3
 80011a2:	3301      	adds	r3, #1
 80011a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	bf0c      	ite	eq
 80011ac:	2301      	moveq	r3, #1
 80011ae:	2300      	movne	r3, #0
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	e012      	b.n	80011da <HAL_I2C_Init+0x18e>
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	1e58      	subs	r0, r3, #1
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6859      	ldr	r1, [r3, #4]
 80011bc:	460b      	mov	r3, r1
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	440b      	add	r3, r1
 80011c2:	0099      	lsls	r1, r3, #2
 80011c4:	440b      	add	r3, r1
 80011c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80011ca:	3301      	adds	r3, #1
 80011cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	bf0c      	ite	eq
 80011d4:	2301      	moveq	r3, #1
 80011d6:	2300      	movne	r3, #0
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <HAL_I2C_Init+0x196>
 80011de:	2301      	movs	r3, #1
 80011e0:	e022      	b.n	8001228 <HAL_I2C_Init+0x1dc>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d10e      	bne.n	8001208 <HAL_I2C_Init+0x1bc>
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	1e58      	subs	r0, r3, #1
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6859      	ldr	r1, [r3, #4]
 80011f2:	460b      	mov	r3, r1
 80011f4:	005b      	lsls	r3, r3, #1
 80011f6:	440b      	add	r3, r1
 80011f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80011fc:	3301      	adds	r3, #1
 80011fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001202:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001206:	e00f      	b.n	8001228 <HAL_I2C_Init+0x1dc>
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	1e58      	subs	r0, r3, #1
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6859      	ldr	r1, [r3, #4]
 8001210:	460b      	mov	r3, r1
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	440b      	add	r3, r1
 8001216:	0099      	lsls	r1, r3, #2
 8001218:	440b      	add	r3, r1
 800121a:	fbb0 f3f3 	udiv	r3, r0, r3
 800121e:	3301      	adds	r3, #1
 8001220:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001224:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001228:	6879      	ldr	r1, [r7, #4]
 800122a:	6809      	ldr	r1, [r1, #0]
 800122c:	4313      	orrs	r3, r2
 800122e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	69da      	ldr	r2, [r3, #28]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6a1b      	ldr	r3, [r3, #32]
 8001242:	431a      	orrs	r2, r3
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	430a      	orrs	r2, r1
 800124a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001256:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800125a:	687a      	ldr	r2, [r7, #4]
 800125c:	6911      	ldr	r1, [r2, #16]
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	68d2      	ldr	r2, [r2, #12]
 8001262:	4311      	orrs	r1, r2
 8001264:	687a      	ldr	r2, [r7, #4]
 8001266:	6812      	ldr	r2, [r2, #0]
 8001268:	430b      	orrs	r3, r1
 800126a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	68db      	ldr	r3, [r3, #12]
 8001272:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	695a      	ldr	r2, [r3, #20]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	699b      	ldr	r3, [r3, #24]
 800127e:	431a      	orrs	r2, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	430a      	orrs	r2, r1
 8001286:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f042 0201 	orr.w	r2, r2, #1
 8001296:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2200      	movs	r2, #0
 800129c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2220      	movs	r2, #32
 80012a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2200      	movs	r2, #0
 80012aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2200      	movs	r2, #0
 80012b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80012b4:	2300      	movs	r3, #0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3710      	adds	r7, #16
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	000186a0 	.word	0x000186a0
 80012c4:	001e847f 	.word	0x001e847f
 80012c8:	003d08ff 	.word	0x003d08ff
 80012cc:	431bde83 	.word	0x431bde83
 80012d0:	10624dd3 	.word	0x10624dd3

080012d4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b08c      	sub	sp, #48	; 0x30
 80012d8:	af02      	add	r7, sp, #8
 80012da:	60f8      	str	r0, [r7, #12]
 80012dc:	607a      	str	r2, [r7, #4]
 80012de:	461a      	mov	r2, r3
 80012e0:	460b      	mov	r3, r1
 80012e2:	817b      	strh	r3, [r7, #10]
 80012e4:	4613      	mov	r3, r2
 80012e6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80012e8:	f7ff fc08 	bl	8000afc <HAL_GetTick>
 80012ec:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	2b20      	cmp	r3, #32
 80012f8:	f040 8217 	bne.w	800172a <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80012fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fe:	9300      	str	r3, [sp, #0]
 8001300:	2319      	movs	r3, #25
 8001302:	2201      	movs	r2, #1
 8001304:	497c      	ldr	r1, [pc, #496]	; (80014f8 <HAL_I2C_Master_Receive+0x224>)
 8001306:	68f8      	ldr	r0, [r7, #12]
 8001308:	f000 fae4 	bl	80018d4 <I2C_WaitOnFlagUntilTimeout>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001312:	2302      	movs	r3, #2
 8001314:	e20a      	b.n	800172c <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800131c:	2b01      	cmp	r3, #1
 800131e:	d101      	bne.n	8001324 <HAL_I2C_Master_Receive+0x50>
 8001320:	2302      	movs	r3, #2
 8001322:	e203      	b.n	800172c <HAL_I2C_Master_Receive+0x458>
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	2201      	movs	r2, #1
 8001328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f003 0301 	and.w	r3, r3, #1
 8001336:	2b01      	cmp	r3, #1
 8001338:	d007      	beq.n	800134a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f042 0201 	orr.w	r2, r2, #1
 8001348:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001358:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	2222      	movs	r2, #34	; 0x22
 800135e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	2210      	movs	r2, #16
 8001366:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	2200      	movs	r2, #0
 800136e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	893a      	ldrh	r2, [r7, #8]
 800137a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001380:	b29a      	uxth	r2, r3
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	4a5c      	ldr	r2, [pc, #368]	; (80014fc <HAL_I2C_Master_Receive+0x228>)
 800138a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800138c:	8979      	ldrh	r1, [r7, #10]
 800138e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001390:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001392:	68f8      	ldr	r0, [r7, #12]
 8001394:	f000 f9d0 	bl	8001738 <I2C_MasterRequestRead>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e1c4      	b.n	800172c <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d113      	bne.n	80013d2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80013aa:	2300      	movs	r3, #0
 80013ac:	623b      	str	r3, [r7, #32]
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	695b      	ldr	r3, [r3, #20]
 80013b4:	623b      	str	r3, [r7, #32]
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	699b      	ldr	r3, [r3, #24]
 80013bc:	623b      	str	r3, [r7, #32]
 80013be:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	e198      	b.n	8001704 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d11b      	bne.n	8001412 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80013e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80013ea:	2300      	movs	r3, #0
 80013ec:	61fb      	str	r3, [r7, #28]
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	695b      	ldr	r3, [r3, #20]
 80013f4:	61fb      	str	r3, [r7, #28]
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	699b      	ldr	r3, [r3, #24]
 80013fc:	61fb      	str	r3, [r7, #28]
 80013fe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	e178      	b.n	8001704 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001416:	2b02      	cmp	r3, #2
 8001418:	d11b      	bne.n	8001452 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001428:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001438:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800143a:	2300      	movs	r3, #0
 800143c:	61bb      	str	r3, [r7, #24]
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	695b      	ldr	r3, [r3, #20]
 8001444:	61bb      	str	r3, [r7, #24]
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	699b      	ldr	r3, [r3, #24]
 800144c:	61bb      	str	r3, [r7, #24]
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	e158      	b.n	8001704 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001460:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001462:	2300      	movs	r3, #0
 8001464:	617b      	str	r3, [r7, #20]
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	695b      	ldr	r3, [r3, #20]
 800146c:	617b      	str	r3, [r7, #20]
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	699b      	ldr	r3, [r3, #24]
 8001474:	617b      	str	r3, [r7, #20]
 8001476:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001478:	e144      	b.n	8001704 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800147e:	2b03      	cmp	r3, #3
 8001480:	f200 80f1 	bhi.w	8001666 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001488:	2b01      	cmp	r3, #1
 800148a:	d123      	bne.n	80014d4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800148c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800148e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001490:	68f8      	ldr	r0, [r7, #12]
 8001492:	f000 fb39 	bl	8001b08 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	e145      	b.n	800172c <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	691a      	ldr	r2, [r3, #16]
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014aa:	b2d2      	uxtb	r2, r2
 80014ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b2:	1c5a      	adds	r2, r3, #1
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014bc:	3b01      	subs	r3, #1
 80014be:	b29a      	uxth	r2, r3
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014c8:	b29b      	uxth	r3, r3
 80014ca:	3b01      	subs	r3, #1
 80014cc:	b29a      	uxth	r2, r3
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80014d2:	e117      	b.n	8001704 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d14e      	bne.n	800157a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80014dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014de:	9300      	str	r3, [sp, #0]
 80014e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014e2:	2200      	movs	r2, #0
 80014e4:	4906      	ldr	r1, [pc, #24]	; (8001500 <HAL_I2C_Master_Receive+0x22c>)
 80014e6:	68f8      	ldr	r0, [r7, #12]
 80014e8:	f000 f9f4 	bl	80018d4 <I2C_WaitOnFlagUntilTimeout>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d008      	beq.n	8001504 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e11a      	b.n	800172c <HAL_I2C_Master_Receive+0x458>
 80014f6:	bf00      	nop
 80014f8:	00100002 	.word	0x00100002
 80014fc:	ffff0000 	.word	0xffff0000
 8001500:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001512:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	691a      	ldr	r2, [r3, #16]
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800151e:	b2d2      	uxtb	r2, r2
 8001520:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001526:	1c5a      	adds	r2, r3, #1
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001530:	3b01      	subs	r3, #1
 8001532:	b29a      	uxth	r2, r3
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800153c:	b29b      	uxth	r3, r3
 800153e:	3b01      	subs	r3, #1
 8001540:	b29a      	uxth	r2, r3
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	691a      	ldr	r2, [r3, #16]
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001550:	b2d2      	uxtb	r2, r2
 8001552:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001558:	1c5a      	adds	r2, r3, #1
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001562:	3b01      	subs	r3, #1
 8001564:	b29a      	uxth	r2, r3
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800156e:	b29b      	uxth	r3, r3
 8001570:	3b01      	subs	r3, #1
 8001572:	b29a      	uxth	r2, r3
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001578:	e0c4      	b.n	8001704 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800157a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157c:	9300      	str	r3, [sp, #0]
 800157e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001580:	2200      	movs	r2, #0
 8001582:	496c      	ldr	r1, [pc, #432]	; (8001734 <HAL_I2C_Master_Receive+0x460>)
 8001584:	68f8      	ldr	r0, [r7, #12]
 8001586:	f000 f9a5 	bl	80018d4 <I2C_WaitOnFlagUntilTimeout>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	e0cb      	b.n	800172c <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	691a      	ldr	r2, [r3, #16]
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ae:	b2d2      	uxtb	r2, r2
 80015b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b6:	1c5a      	adds	r2, r3, #1
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015c0:	3b01      	subs	r3, #1
 80015c2:	b29a      	uxth	r2, r3
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015cc:	b29b      	uxth	r3, r3
 80015ce:	3b01      	subs	r3, #1
 80015d0:	b29a      	uxth	r2, r3
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80015d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d8:	9300      	str	r3, [sp, #0]
 80015da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015dc:	2200      	movs	r2, #0
 80015de:	4955      	ldr	r1, [pc, #340]	; (8001734 <HAL_I2C_Master_Receive+0x460>)
 80015e0:	68f8      	ldr	r0, [r7, #12]
 80015e2:	f000 f977 	bl	80018d4 <I2C_WaitOnFlagUntilTimeout>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	e09d      	b.n	800172c <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	691a      	ldr	r2, [r3, #16]
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800160a:	b2d2      	uxtb	r2, r2
 800160c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001612:	1c5a      	adds	r2, r3, #1
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800161c:	3b01      	subs	r3, #1
 800161e:	b29a      	uxth	r2, r3
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001628:	b29b      	uxth	r3, r3
 800162a:	3b01      	subs	r3, #1
 800162c:	b29a      	uxth	r2, r3
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	691a      	ldr	r2, [r3, #16]
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800163c:	b2d2      	uxtb	r2, r2
 800163e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001644:	1c5a      	adds	r2, r3, #1
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800164e:	3b01      	subs	r3, #1
 8001650:	b29a      	uxth	r2, r3
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800165a:	b29b      	uxth	r3, r3
 800165c:	3b01      	subs	r3, #1
 800165e:	b29a      	uxth	r2, r3
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001664:	e04e      	b.n	8001704 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001666:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001668:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800166a:	68f8      	ldr	r0, [r7, #12]
 800166c:	f000 fa4c 	bl	8001b08 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e058      	b.n	800172c <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	691a      	ldr	r2, [r3, #16]
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001684:	b2d2      	uxtb	r2, r2
 8001686:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800168c:	1c5a      	adds	r2, r3, #1
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001696:	3b01      	subs	r3, #1
 8001698:	b29a      	uxth	r2, r3
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	3b01      	subs	r3, #1
 80016a6:	b29a      	uxth	r2, r3
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	695b      	ldr	r3, [r3, #20]
 80016b2:	f003 0304 	and.w	r3, r3, #4
 80016b6:	2b04      	cmp	r3, #4
 80016b8:	d124      	bne.n	8001704 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016be:	2b03      	cmp	r3, #3
 80016c0:	d107      	bne.n	80016d2 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80016d0:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	691a      	ldr	r2, [r3, #16]
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016dc:	b2d2      	uxtb	r2, r2
 80016de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e4:	1c5a      	adds	r2, r3, #1
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016ee:	3b01      	subs	r3, #1
 80016f0:	b29a      	uxth	r2, r3
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016fa:	b29b      	uxth	r3, r3
 80016fc:	3b01      	subs	r3, #1
 80016fe:	b29a      	uxth	r2, r3
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001708:	2b00      	cmp	r3, #0
 800170a:	f47f aeb6 	bne.w	800147a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	2220      	movs	r2, #32
 8001712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	2200      	movs	r2, #0
 800171a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	2200      	movs	r2, #0
 8001722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001726:	2300      	movs	r3, #0
 8001728:	e000      	b.n	800172c <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800172a:	2302      	movs	r3, #2
  }
}
 800172c:	4618      	mov	r0, r3
 800172e:	3728      	adds	r7, #40	; 0x28
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	00010004 	.word	0x00010004

08001738 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b088      	sub	sp, #32
 800173c:	af02      	add	r7, sp, #8
 800173e:	60f8      	str	r0, [r7, #12]
 8001740:	607a      	str	r2, [r7, #4]
 8001742:	603b      	str	r3, [r7, #0]
 8001744:	460b      	mov	r3, r1
 8001746:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800174c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800175c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	2b08      	cmp	r3, #8
 8001762:	d006      	beq.n	8001772 <I2C_MasterRequestRead+0x3a>
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	2b01      	cmp	r3, #1
 8001768:	d003      	beq.n	8001772 <I2C_MasterRequestRead+0x3a>
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001770:	d108      	bne.n	8001784 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001780:	601a      	str	r2, [r3, #0]
 8001782:	e00b      	b.n	800179c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001788:	2b11      	cmp	r3, #17
 800178a:	d107      	bne.n	800179c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800179a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	9300      	str	r3, [sp, #0]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2200      	movs	r2, #0
 80017a4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80017a8:	68f8      	ldr	r0, [r7, #12]
 80017aa:	f000 f893 	bl	80018d4 <I2C_WaitOnFlagUntilTimeout>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d00d      	beq.n	80017d0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017c2:	d103      	bne.n	80017cc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017ca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80017cc:	2303      	movs	r3, #3
 80017ce:	e079      	b.n	80018c4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	691b      	ldr	r3, [r3, #16]
 80017d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80017d8:	d108      	bne.n	80017ec <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80017da:	897b      	ldrh	r3, [r7, #10]
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	f043 0301 	orr.w	r3, r3, #1
 80017e2:	b2da      	uxtb	r2, r3
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	611a      	str	r2, [r3, #16]
 80017ea:	e05f      	b.n	80018ac <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80017ec:	897b      	ldrh	r3, [r7, #10]
 80017ee:	11db      	asrs	r3, r3, #7
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	f003 0306 	and.w	r3, r3, #6
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	f063 030f 	orn	r3, r3, #15
 80017fc:	b2da      	uxtb	r2, r3
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	4930      	ldr	r1, [pc, #192]	; (80018cc <I2C_MasterRequestRead+0x194>)
 800180a:	68f8      	ldr	r0, [r7, #12]
 800180c:	f000 f8dc 	bl	80019c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e054      	b.n	80018c4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800181a:	897b      	ldrh	r3, [r7, #10]
 800181c:	b2da      	uxtb	r2, r3
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	4929      	ldr	r1, [pc, #164]	; (80018d0 <I2C_MasterRequestRead+0x198>)
 800182a:	68f8      	ldr	r0, [r7, #12]
 800182c:	f000 f8cc 	bl	80019c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e044      	b.n	80018c4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800183a:	2300      	movs	r3, #0
 800183c:	613b      	str	r3, [r7, #16]
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	695b      	ldr	r3, [r3, #20]
 8001844:	613b      	str	r3, [r7, #16]
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	699b      	ldr	r3, [r3, #24]
 800184c:	613b      	str	r3, [r7, #16]
 800184e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800185e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	9300      	str	r3, [sp, #0]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2200      	movs	r2, #0
 8001868:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800186c:	68f8      	ldr	r0, [r7, #12]
 800186e:	f000 f831 	bl	80018d4 <I2C_WaitOnFlagUntilTimeout>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d00d      	beq.n	8001894 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001882:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001886:	d103      	bne.n	8001890 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800188e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8001890:	2303      	movs	r3, #3
 8001892:	e017      	b.n	80018c4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001894:	897b      	ldrh	r3, [r7, #10]
 8001896:	11db      	asrs	r3, r3, #7
 8001898:	b2db      	uxtb	r3, r3
 800189a:	f003 0306 	and.w	r3, r3, #6
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	f063 030e 	orn	r3, r3, #14
 80018a4:	b2da      	uxtb	r2, r3
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	4907      	ldr	r1, [pc, #28]	; (80018d0 <I2C_MasterRequestRead+0x198>)
 80018b2:	68f8      	ldr	r0, [r7, #12]
 80018b4:	f000 f888 	bl	80019c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e000      	b.n	80018c4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80018c2:	2300      	movs	r3, #0
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3718      	adds	r7, #24
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	00010008 	.word	0x00010008
 80018d0:	00010002 	.word	0x00010002

080018d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	60b9      	str	r1, [r7, #8]
 80018de:	603b      	str	r3, [r7, #0]
 80018e0:	4613      	mov	r3, r2
 80018e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80018e4:	e048      	b.n	8001978 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80018ec:	d044      	beq.n	8001978 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018ee:	f7ff f905 	bl	8000afc <HAL_GetTick>
 80018f2:	4602      	mov	r2, r0
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	683a      	ldr	r2, [r7, #0]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d302      	bcc.n	8001904 <I2C_WaitOnFlagUntilTimeout+0x30>
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d139      	bne.n	8001978 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	0c1b      	lsrs	r3, r3, #16
 8001908:	b2db      	uxtb	r3, r3
 800190a:	2b01      	cmp	r3, #1
 800190c:	d10d      	bne.n	800192a <I2C_WaitOnFlagUntilTimeout+0x56>
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	695b      	ldr	r3, [r3, #20]
 8001914:	43da      	mvns	r2, r3
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	4013      	ands	r3, r2
 800191a:	b29b      	uxth	r3, r3
 800191c:	2b00      	cmp	r3, #0
 800191e:	bf0c      	ite	eq
 8001920:	2301      	moveq	r3, #1
 8001922:	2300      	movne	r3, #0
 8001924:	b2db      	uxtb	r3, r3
 8001926:	461a      	mov	r2, r3
 8001928:	e00c      	b.n	8001944 <I2C_WaitOnFlagUntilTimeout+0x70>
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	699b      	ldr	r3, [r3, #24]
 8001930:	43da      	mvns	r2, r3
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	4013      	ands	r3, r2
 8001936:	b29b      	uxth	r3, r3
 8001938:	2b00      	cmp	r3, #0
 800193a:	bf0c      	ite	eq
 800193c:	2301      	moveq	r3, #1
 800193e:	2300      	movne	r3, #0
 8001940:	b2db      	uxtb	r3, r3
 8001942:	461a      	mov	r2, r3
 8001944:	79fb      	ldrb	r3, [r7, #7]
 8001946:	429a      	cmp	r2, r3
 8001948:	d116      	bne.n	8001978 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	2200      	movs	r2, #0
 800194e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	2220      	movs	r2, #32
 8001954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	2200      	movs	r2, #0
 800195c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001964:	f043 0220 	orr.w	r2, r3, #32
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	2200      	movs	r2, #0
 8001970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e023      	b.n	80019c0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	0c1b      	lsrs	r3, r3, #16
 800197c:	b2db      	uxtb	r3, r3
 800197e:	2b01      	cmp	r3, #1
 8001980:	d10d      	bne.n	800199e <I2C_WaitOnFlagUntilTimeout+0xca>
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	695b      	ldr	r3, [r3, #20]
 8001988:	43da      	mvns	r2, r3
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	4013      	ands	r3, r2
 800198e:	b29b      	uxth	r3, r3
 8001990:	2b00      	cmp	r3, #0
 8001992:	bf0c      	ite	eq
 8001994:	2301      	moveq	r3, #1
 8001996:	2300      	movne	r3, #0
 8001998:	b2db      	uxtb	r3, r3
 800199a:	461a      	mov	r2, r3
 800199c:	e00c      	b.n	80019b8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	699b      	ldr	r3, [r3, #24]
 80019a4:	43da      	mvns	r2, r3
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	4013      	ands	r3, r2
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	bf0c      	ite	eq
 80019b0:	2301      	moveq	r3, #1
 80019b2:	2300      	movne	r3, #0
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	461a      	mov	r2, r3
 80019b8:	79fb      	ldrb	r3, [r7, #7]
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d093      	beq.n	80018e6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80019be:	2300      	movs	r3, #0
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3710      	adds	r7, #16
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	60f8      	str	r0, [r7, #12]
 80019d0:	60b9      	str	r1, [r7, #8]
 80019d2:	607a      	str	r2, [r7, #4]
 80019d4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80019d6:	e071      	b.n	8001abc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	695b      	ldr	r3, [r3, #20]
 80019de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019e6:	d123      	bne.n	8001a30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019f6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001a00:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	2200      	movs	r2, #0
 8001a06:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	2220      	movs	r2, #32
 8001a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	2200      	movs	r2, #0
 8001a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1c:	f043 0204 	orr.w	r2, r3, #4
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2200      	movs	r2, #0
 8001a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e067      	b.n	8001b00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a36:	d041      	beq.n	8001abc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a38:	f7ff f860 	bl	8000afc <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d302      	bcc.n	8001a4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d136      	bne.n	8001abc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	0c1b      	lsrs	r3, r3, #16
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d10c      	bne.n	8001a72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	695b      	ldr	r3, [r3, #20]
 8001a5e:	43da      	mvns	r2, r3
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	4013      	ands	r3, r2
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	bf14      	ite	ne
 8001a6a:	2301      	movne	r3, #1
 8001a6c:	2300      	moveq	r3, #0
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	e00b      	b.n	8001a8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	43da      	mvns	r2, r3
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	b29b      	uxth	r3, r3
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	bf14      	ite	ne
 8001a84:	2301      	movne	r3, #1
 8001a86:	2300      	moveq	r3, #0
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d016      	beq.n	8001abc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	2200      	movs	r2, #0
 8001a92:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2220      	movs	r2, #32
 8001a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa8:	f043 0220 	orr.w	r2, r3, #32
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e021      	b.n	8001b00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	0c1b      	lsrs	r3, r3, #16
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d10c      	bne.n	8001ae0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	695b      	ldr	r3, [r3, #20]
 8001acc:	43da      	mvns	r2, r3
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	bf14      	ite	ne
 8001ad8:	2301      	movne	r3, #1
 8001ada:	2300      	moveq	r3, #0
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	e00b      	b.n	8001af8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	699b      	ldr	r3, [r3, #24]
 8001ae6:	43da      	mvns	r2, r3
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	4013      	ands	r3, r2
 8001aec:	b29b      	uxth	r3, r3
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	bf14      	ite	ne
 8001af2:	2301      	movne	r3, #1
 8001af4:	2300      	moveq	r3, #0
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	f47f af6d 	bne.w	80019d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001afe:	2300      	movs	r3, #0
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3710      	adds	r7, #16
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	60f8      	str	r0, [r7, #12]
 8001b10:	60b9      	str	r1, [r7, #8]
 8001b12:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001b14:	e049      	b.n	8001baa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	695b      	ldr	r3, [r3, #20]
 8001b1c:	f003 0310 	and.w	r3, r3, #16
 8001b20:	2b10      	cmp	r3, #16
 8001b22:	d119      	bne.n	8001b58 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f06f 0210 	mvn.w	r2, #16
 8001b2c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2200      	movs	r2, #0
 8001b32:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2220      	movs	r2, #32
 8001b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e030      	b.n	8001bba <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b58:	f7fe ffd0 	bl	8000afc <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	68ba      	ldr	r2, [r7, #8]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d302      	bcc.n	8001b6e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d11d      	bne.n	8001baa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	695b      	ldr	r3, [r3, #20]
 8001b74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b78:	2b40      	cmp	r3, #64	; 0x40
 8001b7a:	d016      	beq.n	8001baa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	2220      	movs	r2, #32
 8001b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b96:	f043 0220 	orr.w	r2, r3, #32
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e007      	b.n	8001bba <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	695b      	ldr	r3, [r3, #20]
 8001bb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bb4:	2b40      	cmp	r3, #64	; 0x40
 8001bb6:	d1ae      	bne.n	8001b16 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3710      	adds	r7, #16
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
	...

08001bc4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b086      	sub	sp, #24
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d101      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e264      	b.n	80020a0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0301 	and.w	r3, r3, #1
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d075      	beq.n	8001cce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001be2:	4ba3      	ldr	r3, [pc, #652]	; (8001e70 <HAL_RCC_OscConfig+0x2ac>)
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f003 030c 	and.w	r3, r3, #12
 8001bea:	2b04      	cmp	r3, #4
 8001bec:	d00c      	beq.n	8001c08 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bee:	4ba0      	ldr	r3, [pc, #640]	; (8001e70 <HAL_RCC_OscConfig+0x2ac>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001bf6:	2b08      	cmp	r3, #8
 8001bf8:	d112      	bne.n	8001c20 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bfa:	4b9d      	ldr	r3, [pc, #628]	; (8001e70 <HAL_RCC_OscConfig+0x2ac>)
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c06:	d10b      	bne.n	8001c20 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c08:	4b99      	ldr	r3, [pc, #612]	; (8001e70 <HAL_RCC_OscConfig+0x2ac>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d05b      	beq.n	8001ccc <HAL_RCC_OscConfig+0x108>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d157      	bne.n	8001ccc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e23f      	b.n	80020a0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c28:	d106      	bne.n	8001c38 <HAL_RCC_OscConfig+0x74>
 8001c2a:	4b91      	ldr	r3, [pc, #580]	; (8001e70 <HAL_RCC_OscConfig+0x2ac>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a90      	ldr	r2, [pc, #576]	; (8001e70 <HAL_RCC_OscConfig+0x2ac>)
 8001c30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c34:	6013      	str	r3, [r2, #0]
 8001c36:	e01d      	b.n	8001c74 <HAL_RCC_OscConfig+0xb0>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c40:	d10c      	bne.n	8001c5c <HAL_RCC_OscConfig+0x98>
 8001c42:	4b8b      	ldr	r3, [pc, #556]	; (8001e70 <HAL_RCC_OscConfig+0x2ac>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a8a      	ldr	r2, [pc, #552]	; (8001e70 <HAL_RCC_OscConfig+0x2ac>)
 8001c48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c4c:	6013      	str	r3, [r2, #0]
 8001c4e:	4b88      	ldr	r3, [pc, #544]	; (8001e70 <HAL_RCC_OscConfig+0x2ac>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a87      	ldr	r2, [pc, #540]	; (8001e70 <HAL_RCC_OscConfig+0x2ac>)
 8001c54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c58:	6013      	str	r3, [r2, #0]
 8001c5a:	e00b      	b.n	8001c74 <HAL_RCC_OscConfig+0xb0>
 8001c5c:	4b84      	ldr	r3, [pc, #528]	; (8001e70 <HAL_RCC_OscConfig+0x2ac>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a83      	ldr	r2, [pc, #524]	; (8001e70 <HAL_RCC_OscConfig+0x2ac>)
 8001c62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c66:	6013      	str	r3, [r2, #0]
 8001c68:	4b81      	ldr	r3, [pc, #516]	; (8001e70 <HAL_RCC_OscConfig+0x2ac>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a80      	ldr	r2, [pc, #512]	; (8001e70 <HAL_RCC_OscConfig+0x2ac>)
 8001c6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d013      	beq.n	8001ca4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c7c:	f7fe ff3e 	bl	8000afc <HAL_GetTick>
 8001c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c82:	e008      	b.n	8001c96 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c84:	f7fe ff3a 	bl	8000afc <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b64      	cmp	r3, #100	; 0x64
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e204      	b.n	80020a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c96:	4b76      	ldr	r3, [pc, #472]	; (8001e70 <HAL_RCC_OscConfig+0x2ac>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d0f0      	beq.n	8001c84 <HAL_RCC_OscConfig+0xc0>
 8001ca2:	e014      	b.n	8001cce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca4:	f7fe ff2a 	bl	8000afc <HAL_GetTick>
 8001ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001caa:	e008      	b.n	8001cbe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cac:	f7fe ff26 	bl	8000afc <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b64      	cmp	r3, #100	; 0x64
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e1f0      	b.n	80020a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cbe:	4b6c      	ldr	r3, [pc, #432]	; (8001e70 <HAL_RCC_OscConfig+0x2ac>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d1f0      	bne.n	8001cac <HAL_RCC_OscConfig+0xe8>
 8001cca:	e000      	b.n	8001cce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ccc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d063      	beq.n	8001da2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001cda:	4b65      	ldr	r3, [pc, #404]	; (8001e70 <HAL_RCC_OscConfig+0x2ac>)
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	f003 030c 	and.w	r3, r3, #12
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d00b      	beq.n	8001cfe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ce6:	4b62      	ldr	r3, [pc, #392]	; (8001e70 <HAL_RCC_OscConfig+0x2ac>)
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001cee:	2b08      	cmp	r3, #8
 8001cf0:	d11c      	bne.n	8001d2c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cf2:	4b5f      	ldr	r3, [pc, #380]	; (8001e70 <HAL_RCC_OscConfig+0x2ac>)
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d116      	bne.n	8001d2c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cfe:	4b5c      	ldr	r3, [pc, #368]	; (8001e70 <HAL_RCC_OscConfig+0x2ac>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d005      	beq.n	8001d16 <HAL_RCC_OscConfig+0x152>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d001      	beq.n	8001d16 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e1c4      	b.n	80020a0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d16:	4b56      	ldr	r3, [pc, #344]	; (8001e70 <HAL_RCC_OscConfig+0x2ac>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	691b      	ldr	r3, [r3, #16]
 8001d22:	00db      	lsls	r3, r3, #3
 8001d24:	4952      	ldr	r1, [pc, #328]	; (8001e70 <HAL_RCC_OscConfig+0x2ac>)
 8001d26:	4313      	orrs	r3, r2
 8001d28:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d2a:	e03a      	b.n	8001da2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d020      	beq.n	8001d76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d34:	4b4f      	ldr	r3, [pc, #316]	; (8001e74 <HAL_RCC_OscConfig+0x2b0>)
 8001d36:	2201      	movs	r2, #1
 8001d38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d3a:	f7fe fedf 	bl	8000afc <HAL_GetTick>
 8001d3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d40:	e008      	b.n	8001d54 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d42:	f7fe fedb 	bl	8000afc <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d901      	bls.n	8001d54 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d50:	2303      	movs	r3, #3
 8001d52:	e1a5      	b.n	80020a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d54:	4b46      	ldr	r3, [pc, #280]	; (8001e70 <HAL_RCC_OscConfig+0x2ac>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0302 	and.w	r3, r3, #2
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d0f0      	beq.n	8001d42 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d60:	4b43      	ldr	r3, [pc, #268]	; (8001e70 <HAL_RCC_OscConfig+0x2ac>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	691b      	ldr	r3, [r3, #16]
 8001d6c:	00db      	lsls	r3, r3, #3
 8001d6e:	4940      	ldr	r1, [pc, #256]	; (8001e70 <HAL_RCC_OscConfig+0x2ac>)
 8001d70:	4313      	orrs	r3, r2
 8001d72:	600b      	str	r3, [r1, #0]
 8001d74:	e015      	b.n	8001da2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d76:	4b3f      	ldr	r3, [pc, #252]	; (8001e74 <HAL_RCC_OscConfig+0x2b0>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d7c:	f7fe febe 	bl	8000afc <HAL_GetTick>
 8001d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d82:	e008      	b.n	8001d96 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d84:	f7fe feba 	bl	8000afc <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e184      	b.n	80020a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d96:	4b36      	ldr	r3, [pc, #216]	; (8001e70 <HAL_RCC_OscConfig+0x2ac>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d1f0      	bne.n	8001d84 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0308 	and.w	r3, r3, #8
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d030      	beq.n	8001e10 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	695b      	ldr	r3, [r3, #20]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d016      	beq.n	8001de4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001db6:	4b30      	ldr	r3, [pc, #192]	; (8001e78 <HAL_RCC_OscConfig+0x2b4>)
 8001db8:	2201      	movs	r2, #1
 8001dba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dbc:	f7fe fe9e 	bl	8000afc <HAL_GetTick>
 8001dc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dc2:	e008      	b.n	8001dd6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dc4:	f7fe fe9a 	bl	8000afc <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e164      	b.n	80020a0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dd6:	4b26      	ldr	r3, [pc, #152]	; (8001e70 <HAL_RCC_OscConfig+0x2ac>)
 8001dd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d0f0      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x200>
 8001de2:	e015      	b.n	8001e10 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001de4:	4b24      	ldr	r3, [pc, #144]	; (8001e78 <HAL_RCC_OscConfig+0x2b4>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dea:	f7fe fe87 	bl	8000afc <HAL_GetTick>
 8001dee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001df0:	e008      	b.n	8001e04 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001df2:	f7fe fe83 	bl	8000afc <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d901      	bls.n	8001e04 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e14d      	b.n	80020a0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e04:	4b1a      	ldr	r3, [pc, #104]	; (8001e70 <HAL_RCC_OscConfig+0x2ac>)
 8001e06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e08:	f003 0302 	and.w	r3, r3, #2
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d1f0      	bne.n	8001df2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0304 	and.w	r3, r3, #4
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	f000 80a0 	beq.w	8001f5e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e22:	4b13      	ldr	r3, [pc, #76]	; (8001e70 <HAL_RCC_OscConfig+0x2ac>)
 8001e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d10f      	bne.n	8001e4e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e2e:	2300      	movs	r3, #0
 8001e30:	60bb      	str	r3, [r7, #8]
 8001e32:	4b0f      	ldr	r3, [pc, #60]	; (8001e70 <HAL_RCC_OscConfig+0x2ac>)
 8001e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e36:	4a0e      	ldr	r2, [pc, #56]	; (8001e70 <HAL_RCC_OscConfig+0x2ac>)
 8001e38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e3e:	4b0c      	ldr	r3, [pc, #48]	; (8001e70 <HAL_RCC_OscConfig+0x2ac>)
 8001e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e46:	60bb      	str	r3, [r7, #8]
 8001e48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e4e:	4b0b      	ldr	r3, [pc, #44]	; (8001e7c <HAL_RCC_OscConfig+0x2b8>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d121      	bne.n	8001e9e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e5a:	4b08      	ldr	r3, [pc, #32]	; (8001e7c <HAL_RCC_OscConfig+0x2b8>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a07      	ldr	r2, [pc, #28]	; (8001e7c <HAL_RCC_OscConfig+0x2b8>)
 8001e60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e66:	f7fe fe49 	bl	8000afc <HAL_GetTick>
 8001e6a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e6c:	e011      	b.n	8001e92 <HAL_RCC_OscConfig+0x2ce>
 8001e6e:	bf00      	nop
 8001e70:	40023800 	.word	0x40023800
 8001e74:	42470000 	.word	0x42470000
 8001e78:	42470e80 	.word	0x42470e80
 8001e7c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e80:	f7fe fe3c 	bl	8000afc <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d901      	bls.n	8001e92 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e106      	b.n	80020a0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e92:	4b85      	ldr	r3, [pc, #532]	; (80020a8 <HAL_RCC_OscConfig+0x4e4>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d0f0      	beq.n	8001e80 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d106      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x2f0>
 8001ea6:	4b81      	ldr	r3, [pc, #516]	; (80020ac <HAL_RCC_OscConfig+0x4e8>)
 8001ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eaa:	4a80      	ldr	r2, [pc, #512]	; (80020ac <HAL_RCC_OscConfig+0x4e8>)
 8001eac:	f043 0301 	orr.w	r3, r3, #1
 8001eb0:	6713      	str	r3, [r2, #112]	; 0x70
 8001eb2:	e01c      	b.n	8001eee <HAL_RCC_OscConfig+0x32a>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	2b05      	cmp	r3, #5
 8001eba:	d10c      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x312>
 8001ebc:	4b7b      	ldr	r3, [pc, #492]	; (80020ac <HAL_RCC_OscConfig+0x4e8>)
 8001ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ec0:	4a7a      	ldr	r2, [pc, #488]	; (80020ac <HAL_RCC_OscConfig+0x4e8>)
 8001ec2:	f043 0304 	orr.w	r3, r3, #4
 8001ec6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ec8:	4b78      	ldr	r3, [pc, #480]	; (80020ac <HAL_RCC_OscConfig+0x4e8>)
 8001eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ecc:	4a77      	ldr	r2, [pc, #476]	; (80020ac <HAL_RCC_OscConfig+0x4e8>)
 8001ece:	f043 0301 	orr.w	r3, r3, #1
 8001ed2:	6713      	str	r3, [r2, #112]	; 0x70
 8001ed4:	e00b      	b.n	8001eee <HAL_RCC_OscConfig+0x32a>
 8001ed6:	4b75      	ldr	r3, [pc, #468]	; (80020ac <HAL_RCC_OscConfig+0x4e8>)
 8001ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eda:	4a74      	ldr	r2, [pc, #464]	; (80020ac <HAL_RCC_OscConfig+0x4e8>)
 8001edc:	f023 0301 	bic.w	r3, r3, #1
 8001ee0:	6713      	str	r3, [r2, #112]	; 0x70
 8001ee2:	4b72      	ldr	r3, [pc, #456]	; (80020ac <HAL_RCC_OscConfig+0x4e8>)
 8001ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ee6:	4a71      	ldr	r2, [pc, #452]	; (80020ac <HAL_RCC_OscConfig+0x4e8>)
 8001ee8:	f023 0304 	bic.w	r3, r3, #4
 8001eec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d015      	beq.n	8001f22 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ef6:	f7fe fe01 	bl	8000afc <HAL_GetTick>
 8001efa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001efc:	e00a      	b.n	8001f14 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001efe:	f7fe fdfd 	bl	8000afc <HAL_GetTick>
 8001f02:	4602      	mov	r2, r0
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d901      	bls.n	8001f14 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001f10:	2303      	movs	r3, #3
 8001f12:	e0c5      	b.n	80020a0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f14:	4b65      	ldr	r3, [pc, #404]	; (80020ac <HAL_RCC_OscConfig+0x4e8>)
 8001f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f18:	f003 0302 	and.w	r3, r3, #2
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d0ee      	beq.n	8001efe <HAL_RCC_OscConfig+0x33a>
 8001f20:	e014      	b.n	8001f4c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f22:	f7fe fdeb 	bl	8000afc <HAL_GetTick>
 8001f26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f28:	e00a      	b.n	8001f40 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f2a:	f7fe fde7 	bl	8000afc <HAL_GetTick>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d901      	bls.n	8001f40 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e0af      	b.n	80020a0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f40:	4b5a      	ldr	r3, [pc, #360]	; (80020ac <HAL_RCC_OscConfig+0x4e8>)
 8001f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f44:	f003 0302 	and.w	r3, r3, #2
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d1ee      	bne.n	8001f2a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f4c:	7dfb      	ldrb	r3, [r7, #23]
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d105      	bne.n	8001f5e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f52:	4b56      	ldr	r3, [pc, #344]	; (80020ac <HAL_RCC_OscConfig+0x4e8>)
 8001f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f56:	4a55      	ldr	r2, [pc, #340]	; (80020ac <HAL_RCC_OscConfig+0x4e8>)
 8001f58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f5c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	699b      	ldr	r3, [r3, #24]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	f000 809b 	beq.w	800209e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f68:	4b50      	ldr	r3, [pc, #320]	; (80020ac <HAL_RCC_OscConfig+0x4e8>)
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f003 030c 	and.w	r3, r3, #12
 8001f70:	2b08      	cmp	r3, #8
 8001f72:	d05c      	beq.n	800202e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	699b      	ldr	r3, [r3, #24]
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d141      	bne.n	8002000 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f7c:	4b4c      	ldr	r3, [pc, #304]	; (80020b0 <HAL_RCC_OscConfig+0x4ec>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f82:	f7fe fdbb 	bl	8000afc <HAL_GetTick>
 8001f86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f88:	e008      	b.n	8001f9c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f8a:	f7fe fdb7 	bl	8000afc <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d901      	bls.n	8001f9c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e081      	b.n	80020a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f9c:	4b43      	ldr	r3, [pc, #268]	; (80020ac <HAL_RCC_OscConfig+0x4e8>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d1f0      	bne.n	8001f8a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	69da      	ldr	r2, [r3, #28]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6a1b      	ldr	r3, [r3, #32]
 8001fb0:	431a      	orrs	r2, r3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb6:	019b      	lsls	r3, r3, #6
 8001fb8:	431a      	orrs	r2, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fbe:	085b      	lsrs	r3, r3, #1
 8001fc0:	3b01      	subs	r3, #1
 8001fc2:	041b      	lsls	r3, r3, #16
 8001fc4:	431a      	orrs	r2, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fca:	061b      	lsls	r3, r3, #24
 8001fcc:	4937      	ldr	r1, [pc, #220]	; (80020ac <HAL_RCC_OscConfig+0x4e8>)
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fd2:	4b37      	ldr	r3, [pc, #220]	; (80020b0 <HAL_RCC_OscConfig+0x4ec>)
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd8:	f7fe fd90 	bl	8000afc <HAL_GetTick>
 8001fdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fde:	e008      	b.n	8001ff2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fe0:	f7fe fd8c 	bl	8000afc <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d901      	bls.n	8001ff2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e056      	b.n	80020a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ff2:	4b2e      	ldr	r3, [pc, #184]	; (80020ac <HAL_RCC_OscConfig+0x4e8>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d0f0      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x41c>
 8001ffe:	e04e      	b.n	800209e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002000:	4b2b      	ldr	r3, [pc, #172]	; (80020b0 <HAL_RCC_OscConfig+0x4ec>)
 8002002:	2200      	movs	r2, #0
 8002004:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002006:	f7fe fd79 	bl	8000afc <HAL_GetTick>
 800200a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800200c:	e008      	b.n	8002020 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800200e:	f7fe fd75 	bl	8000afc <HAL_GetTick>
 8002012:	4602      	mov	r2, r0
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	2b02      	cmp	r3, #2
 800201a:	d901      	bls.n	8002020 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800201c:	2303      	movs	r3, #3
 800201e:	e03f      	b.n	80020a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002020:	4b22      	ldr	r3, [pc, #136]	; (80020ac <HAL_RCC_OscConfig+0x4e8>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d1f0      	bne.n	800200e <HAL_RCC_OscConfig+0x44a>
 800202c:	e037      	b.n	800209e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	699b      	ldr	r3, [r3, #24]
 8002032:	2b01      	cmp	r3, #1
 8002034:	d101      	bne.n	800203a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e032      	b.n	80020a0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800203a:	4b1c      	ldr	r3, [pc, #112]	; (80020ac <HAL_RCC_OscConfig+0x4e8>)
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	699b      	ldr	r3, [r3, #24]
 8002044:	2b01      	cmp	r3, #1
 8002046:	d028      	beq.n	800209a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002052:	429a      	cmp	r2, r3
 8002054:	d121      	bne.n	800209a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002060:	429a      	cmp	r2, r3
 8002062:	d11a      	bne.n	800209a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002064:	68fa      	ldr	r2, [r7, #12]
 8002066:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800206a:	4013      	ands	r3, r2
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002070:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002072:	4293      	cmp	r3, r2
 8002074:	d111      	bne.n	800209a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002080:	085b      	lsrs	r3, r3, #1
 8002082:	3b01      	subs	r3, #1
 8002084:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002086:	429a      	cmp	r2, r3
 8002088:	d107      	bne.n	800209a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002094:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002096:	429a      	cmp	r2, r3
 8002098:	d001      	beq.n	800209e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e000      	b.n	80020a0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800209e:	2300      	movs	r3, #0
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3718      	adds	r7, #24
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	40007000 	.word	0x40007000
 80020ac:	40023800 	.word	0x40023800
 80020b0:	42470060 	.word	0x42470060

080020b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d101      	bne.n	80020c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e0cc      	b.n	8002262 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020c8:	4b68      	ldr	r3, [pc, #416]	; (800226c <HAL_RCC_ClockConfig+0x1b8>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0307 	and.w	r3, r3, #7
 80020d0:	683a      	ldr	r2, [r7, #0]
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d90c      	bls.n	80020f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020d6:	4b65      	ldr	r3, [pc, #404]	; (800226c <HAL_RCC_ClockConfig+0x1b8>)
 80020d8:	683a      	ldr	r2, [r7, #0]
 80020da:	b2d2      	uxtb	r2, r2
 80020dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020de:	4b63      	ldr	r3, [pc, #396]	; (800226c <HAL_RCC_ClockConfig+0x1b8>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0307 	and.w	r3, r3, #7
 80020e6:	683a      	ldr	r2, [r7, #0]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d001      	beq.n	80020f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e0b8      	b.n	8002262 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0302 	and.w	r3, r3, #2
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d020      	beq.n	800213e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0304 	and.w	r3, r3, #4
 8002104:	2b00      	cmp	r3, #0
 8002106:	d005      	beq.n	8002114 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002108:	4b59      	ldr	r3, [pc, #356]	; (8002270 <HAL_RCC_ClockConfig+0x1bc>)
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	4a58      	ldr	r2, [pc, #352]	; (8002270 <HAL_RCC_ClockConfig+0x1bc>)
 800210e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002112:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0308 	and.w	r3, r3, #8
 800211c:	2b00      	cmp	r3, #0
 800211e:	d005      	beq.n	800212c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002120:	4b53      	ldr	r3, [pc, #332]	; (8002270 <HAL_RCC_ClockConfig+0x1bc>)
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	4a52      	ldr	r2, [pc, #328]	; (8002270 <HAL_RCC_ClockConfig+0x1bc>)
 8002126:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800212a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800212c:	4b50      	ldr	r3, [pc, #320]	; (8002270 <HAL_RCC_ClockConfig+0x1bc>)
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	494d      	ldr	r1, [pc, #308]	; (8002270 <HAL_RCC_ClockConfig+0x1bc>)
 800213a:	4313      	orrs	r3, r2
 800213c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	2b00      	cmp	r3, #0
 8002148:	d044      	beq.n	80021d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	2b01      	cmp	r3, #1
 8002150:	d107      	bne.n	8002162 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002152:	4b47      	ldr	r3, [pc, #284]	; (8002270 <HAL_RCC_ClockConfig+0x1bc>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d119      	bne.n	8002192 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e07f      	b.n	8002262 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	2b02      	cmp	r3, #2
 8002168:	d003      	beq.n	8002172 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800216e:	2b03      	cmp	r3, #3
 8002170:	d107      	bne.n	8002182 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002172:	4b3f      	ldr	r3, [pc, #252]	; (8002270 <HAL_RCC_ClockConfig+0x1bc>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d109      	bne.n	8002192 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e06f      	b.n	8002262 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002182:	4b3b      	ldr	r3, [pc, #236]	; (8002270 <HAL_RCC_ClockConfig+0x1bc>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0302 	and.w	r3, r3, #2
 800218a:	2b00      	cmp	r3, #0
 800218c:	d101      	bne.n	8002192 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e067      	b.n	8002262 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002192:	4b37      	ldr	r3, [pc, #220]	; (8002270 <HAL_RCC_ClockConfig+0x1bc>)
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f023 0203 	bic.w	r2, r3, #3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	4934      	ldr	r1, [pc, #208]	; (8002270 <HAL_RCC_ClockConfig+0x1bc>)
 80021a0:	4313      	orrs	r3, r2
 80021a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021a4:	f7fe fcaa 	bl	8000afc <HAL_GetTick>
 80021a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021aa:	e00a      	b.n	80021c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021ac:	f7fe fca6 	bl	8000afc <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e04f      	b.n	8002262 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021c2:	4b2b      	ldr	r3, [pc, #172]	; (8002270 <HAL_RCC_ClockConfig+0x1bc>)
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	f003 020c 	and.w	r2, r3, #12
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d1eb      	bne.n	80021ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021d4:	4b25      	ldr	r3, [pc, #148]	; (800226c <HAL_RCC_ClockConfig+0x1b8>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0307 	and.w	r3, r3, #7
 80021dc:	683a      	ldr	r2, [r7, #0]
 80021de:	429a      	cmp	r2, r3
 80021e0:	d20c      	bcs.n	80021fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021e2:	4b22      	ldr	r3, [pc, #136]	; (800226c <HAL_RCC_ClockConfig+0x1b8>)
 80021e4:	683a      	ldr	r2, [r7, #0]
 80021e6:	b2d2      	uxtb	r2, r2
 80021e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ea:	4b20      	ldr	r3, [pc, #128]	; (800226c <HAL_RCC_ClockConfig+0x1b8>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0307 	and.w	r3, r3, #7
 80021f2:	683a      	ldr	r2, [r7, #0]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d001      	beq.n	80021fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e032      	b.n	8002262 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0304 	and.w	r3, r3, #4
 8002204:	2b00      	cmp	r3, #0
 8002206:	d008      	beq.n	800221a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002208:	4b19      	ldr	r3, [pc, #100]	; (8002270 <HAL_RCC_ClockConfig+0x1bc>)
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	4916      	ldr	r1, [pc, #88]	; (8002270 <HAL_RCC_ClockConfig+0x1bc>)
 8002216:	4313      	orrs	r3, r2
 8002218:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0308 	and.w	r3, r3, #8
 8002222:	2b00      	cmp	r3, #0
 8002224:	d009      	beq.n	800223a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002226:	4b12      	ldr	r3, [pc, #72]	; (8002270 <HAL_RCC_ClockConfig+0x1bc>)
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	691b      	ldr	r3, [r3, #16]
 8002232:	00db      	lsls	r3, r3, #3
 8002234:	490e      	ldr	r1, [pc, #56]	; (8002270 <HAL_RCC_ClockConfig+0x1bc>)
 8002236:	4313      	orrs	r3, r2
 8002238:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800223a:	f000 f821 	bl	8002280 <HAL_RCC_GetSysClockFreq>
 800223e:	4602      	mov	r2, r0
 8002240:	4b0b      	ldr	r3, [pc, #44]	; (8002270 <HAL_RCC_ClockConfig+0x1bc>)
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	091b      	lsrs	r3, r3, #4
 8002246:	f003 030f 	and.w	r3, r3, #15
 800224a:	490a      	ldr	r1, [pc, #40]	; (8002274 <HAL_RCC_ClockConfig+0x1c0>)
 800224c:	5ccb      	ldrb	r3, [r1, r3]
 800224e:	fa22 f303 	lsr.w	r3, r2, r3
 8002252:	4a09      	ldr	r2, [pc, #36]	; (8002278 <HAL_RCC_ClockConfig+0x1c4>)
 8002254:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002256:	4b09      	ldr	r3, [pc, #36]	; (800227c <HAL_RCC_ClockConfig+0x1c8>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4618      	mov	r0, r3
 800225c:	f7fe fc0a 	bl	8000a74 <HAL_InitTick>

  return HAL_OK;
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	3710      	adds	r7, #16
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	40023c00 	.word	0x40023c00
 8002270:	40023800 	.word	0x40023800
 8002274:	0800249c 	.word	0x0800249c
 8002278:	20000000 	.word	0x20000000
 800227c:	20000004 	.word	0x20000004

08002280 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002280:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002284:	b084      	sub	sp, #16
 8002286:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002288:	2300      	movs	r3, #0
 800228a:	607b      	str	r3, [r7, #4]
 800228c:	2300      	movs	r3, #0
 800228e:	60fb      	str	r3, [r7, #12]
 8002290:	2300      	movs	r3, #0
 8002292:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002294:	2300      	movs	r3, #0
 8002296:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002298:	4b67      	ldr	r3, [pc, #412]	; (8002438 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f003 030c 	and.w	r3, r3, #12
 80022a0:	2b08      	cmp	r3, #8
 80022a2:	d00d      	beq.n	80022c0 <HAL_RCC_GetSysClockFreq+0x40>
 80022a4:	2b08      	cmp	r3, #8
 80022a6:	f200 80bd 	bhi.w	8002424 <HAL_RCC_GetSysClockFreq+0x1a4>
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d002      	beq.n	80022b4 <HAL_RCC_GetSysClockFreq+0x34>
 80022ae:	2b04      	cmp	r3, #4
 80022b0:	d003      	beq.n	80022ba <HAL_RCC_GetSysClockFreq+0x3a>
 80022b2:	e0b7      	b.n	8002424 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022b4:	4b61      	ldr	r3, [pc, #388]	; (800243c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80022b6:	60bb      	str	r3, [r7, #8]
       break;
 80022b8:	e0b7      	b.n	800242a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022ba:	4b61      	ldr	r3, [pc, #388]	; (8002440 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80022bc:	60bb      	str	r3, [r7, #8]
      break;
 80022be:	e0b4      	b.n	800242a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022c0:	4b5d      	ldr	r3, [pc, #372]	; (8002438 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022c8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022ca:	4b5b      	ldr	r3, [pc, #364]	; (8002438 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d04d      	beq.n	8002372 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022d6:	4b58      	ldr	r3, [pc, #352]	; (8002438 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	099b      	lsrs	r3, r3, #6
 80022dc:	461a      	mov	r2, r3
 80022de:	f04f 0300 	mov.w	r3, #0
 80022e2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80022e6:	f04f 0100 	mov.w	r1, #0
 80022ea:	ea02 0800 	and.w	r8, r2, r0
 80022ee:	ea03 0901 	and.w	r9, r3, r1
 80022f2:	4640      	mov	r0, r8
 80022f4:	4649      	mov	r1, r9
 80022f6:	f04f 0200 	mov.w	r2, #0
 80022fa:	f04f 0300 	mov.w	r3, #0
 80022fe:	014b      	lsls	r3, r1, #5
 8002300:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002304:	0142      	lsls	r2, r0, #5
 8002306:	4610      	mov	r0, r2
 8002308:	4619      	mov	r1, r3
 800230a:	ebb0 0008 	subs.w	r0, r0, r8
 800230e:	eb61 0109 	sbc.w	r1, r1, r9
 8002312:	f04f 0200 	mov.w	r2, #0
 8002316:	f04f 0300 	mov.w	r3, #0
 800231a:	018b      	lsls	r3, r1, #6
 800231c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002320:	0182      	lsls	r2, r0, #6
 8002322:	1a12      	subs	r2, r2, r0
 8002324:	eb63 0301 	sbc.w	r3, r3, r1
 8002328:	f04f 0000 	mov.w	r0, #0
 800232c:	f04f 0100 	mov.w	r1, #0
 8002330:	00d9      	lsls	r1, r3, #3
 8002332:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002336:	00d0      	lsls	r0, r2, #3
 8002338:	4602      	mov	r2, r0
 800233a:	460b      	mov	r3, r1
 800233c:	eb12 0208 	adds.w	r2, r2, r8
 8002340:	eb43 0309 	adc.w	r3, r3, r9
 8002344:	f04f 0000 	mov.w	r0, #0
 8002348:	f04f 0100 	mov.w	r1, #0
 800234c:	0259      	lsls	r1, r3, #9
 800234e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002352:	0250      	lsls	r0, r2, #9
 8002354:	4602      	mov	r2, r0
 8002356:	460b      	mov	r3, r1
 8002358:	4610      	mov	r0, r2
 800235a:	4619      	mov	r1, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	461a      	mov	r2, r3
 8002360:	f04f 0300 	mov.w	r3, #0
 8002364:	f7fd ffc8 	bl	80002f8 <__aeabi_uldivmod>
 8002368:	4602      	mov	r2, r0
 800236a:	460b      	mov	r3, r1
 800236c:	4613      	mov	r3, r2
 800236e:	60fb      	str	r3, [r7, #12]
 8002370:	e04a      	b.n	8002408 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002372:	4b31      	ldr	r3, [pc, #196]	; (8002438 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	099b      	lsrs	r3, r3, #6
 8002378:	461a      	mov	r2, r3
 800237a:	f04f 0300 	mov.w	r3, #0
 800237e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002382:	f04f 0100 	mov.w	r1, #0
 8002386:	ea02 0400 	and.w	r4, r2, r0
 800238a:	ea03 0501 	and.w	r5, r3, r1
 800238e:	4620      	mov	r0, r4
 8002390:	4629      	mov	r1, r5
 8002392:	f04f 0200 	mov.w	r2, #0
 8002396:	f04f 0300 	mov.w	r3, #0
 800239a:	014b      	lsls	r3, r1, #5
 800239c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80023a0:	0142      	lsls	r2, r0, #5
 80023a2:	4610      	mov	r0, r2
 80023a4:	4619      	mov	r1, r3
 80023a6:	1b00      	subs	r0, r0, r4
 80023a8:	eb61 0105 	sbc.w	r1, r1, r5
 80023ac:	f04f 0200 	mov.w	r2, #0
 80023b0:	f04f 0300 	mov.w	r3, #0
 80023b4:	018b      	lsls	r3, r1, #6
 80023b6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80023ba:	0182      	lsls	r2, r0, #6
 80023bc:	1a12      	subs	r2, r2, r0
 80023be:	eb63 0301 	sbc.w	r3, r3, r1
 80023c2:	f04f 0000 	mov.w	r0, #0
 80023c6:	f04f 0100 	mov.w	r1, #0
 80023ca:	00d9      	lsls	r1, r3, #3
 80023cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80023d0:	00d0      	lsls	r0, r2, #3
 80023d2:	4602      	mov	r2, r0
 80023d4:	460b      	mov	r3, r1
 80023d6:	1912      	adds	r2, r2, r4
 80023d8:	eb45 0303 	adc.w	r3, r5, r3
 80023dc:	f04f 0000 	mov.w	r0, #0
 80023e0:	f04f 0100 	mov.w	r1, #0
 80023e4:	0299      	lsls	r1, r3, #10
 80023e6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80023ea:	0290      	lsls	r0, r2, #10
 80023ec:	4602      	mov	r2, r0
 80023ee:	460b      	mov	r3, r1
 80023f0:	4610      	mov	r0, r2
 80023f2:	4619      	mov	r1, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	461a      	mov	r2, r3
 80023f8:	f04f 0300 	mov.w	r3, #0
 80023fc:	f7fd ff7c 	bl	80002f8 <__aeabi_uldivmod>
 8002400:	4602      	mov	r2, r0
 8002402:	460b      	mov	r3, r1
 8002404:	4613      	mov	r3, r2
 8002406:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002408:	4b0b      	ldr	r3, [pc, #44]	; (8002438 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	0c1b      	lsrs	r3, r3, #16
 800240e:	f003 0303 	and.w	r3, r3, #3
 8002412:	3301      	adds	r3, #1
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002418:	68fa      	ldr	r2, [r7, #12]
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002420:	60bb      	str	r3, [r7, #8]
      break;
 8002422:	e002      	b.n	800242a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002424:	4b05      	ldr	r3, [pc, #20]	; (800243c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002426:	60bb      	str	r3, [r7, #8]
      break;
 8002428:	bf00      	nop
    }
  }
  return sysclockfreq;
 800242a:	68bb      	ldr	r3, [r7, #8]
}
 800242c:	4618      	mov	r0, r3
 800242e:	3710      	adds	r7, #16
 8002430:	46bd      	mov	sp, r7
 8002432:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002436:	bf00      	nop
 8002438:	40023800 	.word	0x40023800
 800243c:	00f42400 	.word	0x00f42400
 8002440:	007a1200 	.word	0x007a1200

08002444 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002448:	4b03      	ldr	r3, [pc, #12]	; (8002458 <HAL_RCC_GetHCLKFreq+0x14>)
 800244a:	681b      	ldr	r3, [r3, #0]
}
 800244c:	4618      	mov	r0, r3
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	20000000 	.word	0x20000000

0800245c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002460:	f7ff fff0 	bl	8002444 <HAL_RCC_GetHCLKFreq>
 8002464:	4602      	mov	r2, r0
 8002466:	4b05      	ldr	r3, [pc, #20]	; (800247c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	0a9b      	lsrs	r3, r3, #10
 800246c:	f003 0307 	and.w	r3, r3, #7
 8002470:	4903      	ldr	r1, [pc, #12]	; (8002480 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002472:	5ccb      	ldrb	r3, [r1, r3]
 8002474:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002478:	4618      	mov	r0, r3
 800247a:	bd80      	pop	{r7, pc}
 800247c:	40023800 	.word	0x40023800
 8002480:	080024ac 	.word	0x080024ac

08002484 <_init>:
 8002484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002486:	bf00      	nop
 8002488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800248a:	bc08      	pop	{r3}
 800248c:	469e      	mov	lr, r3
 800248e:	4770      	bx	lr

08002490 <_fini>:
 8002490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002492:	bf00      	nop
 8002494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002496:	bc08      	pop	{r3}
 8002498:	469e      	mov	lr, r3
 800249a:	4770      	bx	lr
